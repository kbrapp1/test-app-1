---
description: 
globs: 
alwaysApply: false
---
# Project Structure Overview
<!-- For a detailed list of technologies and versions used, see [stack-rules.md](mdc:docs/starters/stack-rules.md) -->

- `__mocks__/` <!-- Mocks for testing. -->
  - `next/` <!-- Mocks for Next.js components/functions. -->
- `.cursor/` <!-- Folder for Cursor IDE specific configurations. -->
  - `rules/` <!-- Contains custom rules for Cursor AI. -->
    - `cursor_rules.mdc` <!-- Rules for formatting Cursor rules. -->
    - `self_improve.mdc` <!-- Rules for improving Cursor rules over time. -->
    - `project-structure.mdc` <!-- This file: Overview of the project's directory structure. -->
    - `typescript.mdc` <!-- TypeScript specific coding rules. -->
- `.storybook/` <!-- Configuration for Storybook, a UI component development environment. -->
  - `main.ts` <!-- Main Storybook configuration file. -->
  - `preview.tsx` <!-- Storybook preview configuration (global decorators, parameters). -->
  - `vitest.setup.ts` <!-- Setup file for Vitest within Storybook context. -->
- `app/` <!-- Main application directory for Next.js App Router. -->
  - `(protected)/` <!-- Route group for authenticated routes. -->
    - `layout.tsx` <!-- Layout specific to protected routes. -->
    - `ai-playground/` <!-- Feature: AI Playground section. -->
      - `text-to-speech/`
        - `page.tsx` <!-- Page component for Text-to-Speech feature UI. -->
    - `dam/` <!-- Feature: Digital Asset Management section. -->
      - `page.tsx` <!-- Main page component for DAM dashboard. -->
      - `upload/` <!-- Sub-route for uploading assets. -->
        - `page.tsx` <!-- Page component for asset upload interface. -->
    - `dashboard/` <!-- Feature: Main dashboard section. -->
      - `data.json` <!-- Static data used by the dashboard for charts/metrics. -->
      - `page.tsx` <!-- Page component for main app dashboard. -->
    - `documents/` <!-- Feature: Document management section. -->
      - `notes/` <!-- Sub-section for notes. -->
        - `actions.test.ts` <!-- Tests for notes server actions. -->
        - `actions.ts` <!-- Server actions for creating, editing, and deleting notes. -->
        - `page.test.tsx` <!-- Tests for the notes page component. -->
        - `page.tsx` <!-- Page component for displaying and managing notes. -->
    - `settings/` <!-- Feature: User settings section. -->
      - `layout.test.tsx` <!-- Tests for the settings layout. -->
      - `layout.tsx` <!-- Layout with navigation for all settings pages. -->
      - `page.tsx` <!-- Main settings overview page. -->
      - `danger/` <!-- Sub-section for dangerous settings (e.g., account deletion). -->
        - `page.test.tsx`
        - `page.tsx` <!-- Page with account deletion and other danger zone settings. -->
      - `email/` <!-- Sub-section for email settings. -->
        - `page.test.tsx`
        - `page.tsx` <!-- Page for updating user email address. -->
      - `org-roles/`
        - `page.tsx` <!-- Page for managing organization roles and permissions. -->
      - `password/` <!-- Sub-section for password settings. -->
        - `page.test.tsx`
        - `page.tsx` <!-- Page for updating user password. -->
      - `profile/` <!-- Sub-section for user profile settings. -->
        - `page.test.tsx`
        - `page.tsx` <!-- Page for updating user profile information. -->
      - `security/` <!-- Sub-section for security settings. -->
        - `page.test.tsx`
        - `page.tsx` <!-- Page for security settings like 2FA. -->
    - `team/` <!-- Feature: Team management section. -->
      - `page.tsx` <!-- Page component for managing team members. -->
  - `api/` <!-- Directory for API route handlers. -->
    - `dam/` <!-- API routes related to DAM. -->
      - `route.test.ts` <!-- Tests for the main DAM API route. -->
      - `route.ts` <!-- API route for retrieving and managing digital assets. -->
      - `upload/` <!-- API route for handling asset uploads. -->
        - `route.test.ts` <!-- Tests for the upload API route. -->
        - `route.ts` <!-- API handler for file uploads to storage. -->
    - `profile/` <!-- API routes related to user profiles. -->
      - `route.test.ts`
      - `route.ts` <!-- API route for fetching and updating user profiles. -->
    - `team/` <!-- API routes related to team management. -->
      - `upload/` <!-- Specific API route possibly for team-related uploads. -->
        - `route.test.ts`
        - `route.ts` <!-- API handler for team member profile picture uploads. -->
  - `auth/` <!-- Routes related to authentication. -->
    - `confirm/` <!-- Handles user confirmation actions. -->
      - `confirm-logic.tsx` <!-- Client-side logic for email confirmation process. -->
      - `page.tsx` <!-- Page component displaying confirmation status. -->
    - `callback/` <!-- Handles callbacks from authentication providers. -->
  - `login/` <!-- Public login page route. -->
    - `forgot/` <!-- Password recovery flow. -->
    - `page.tsx` <!-- Login page with authentication form. -->
    - `reset/`
      - `password/`
        - `page.tsx` <!-- Page for setting a new password after reset. -->
  - `onboarding/`
    - `page.tsx` <!-- User onboarding flow after registration. -->
  - `signup/` <!-- Public signup page route. -->
    - `page.tsx` <!-- Registration page with signup form. -->
  - `error.tsx` <!-- Error boundary UI for the entire app. -->
  - `globals.css` <!-- Global CSS styles and Tailwind imports. -->
  - `layout.tsx` <!-- Root layout with providers and global elements. -->
  - `page.tsx` <!-- Root landing page (homepage). -->
- `components/` <!-- Reusable UI components. -->
  - `app-providers.tsx` <!-- Component for wrapping the app with context providers. -->
  - `app-sidebar.tsx` <!-- Main application sidebar navigation component. -->
  - `chart-area-interactive.tsx` <!-- Interactive area chart with hover effects. -->
  - `command-palette.test.tsx` <!-- Tests for the command palette component. -->
  - `command-palette.tsx` <!-- Command palette (Cmd+K) for quick navigation. -->
  - `data-table.tsx` <!-- Reusable data table with sorting and filtering. -->
  - `error-boundary.tsx` <!-- Error boundary to catch and display UI errors. -->
  - `nav-documents.test.tsx` <!-- Tests for the documents navigation component. -->
  - `nav-documents.tsx` <!-- Navigation for document section with folder structure. -->
  - `nav-main.test.tsx` <!-- Tests for the main navigation component. -->
  - `nav-main.tsx` <!-- Main navigation links for the application. -->
  - `nav-secondary.test.tsx` <!-- Tests for the secondary navigation component. -->
  - `nav-secondary.tsx` <!-- Secondary contextual navigation component. -->
  - `nav-user.test.tsx` <!-- Tests for the user navigation/menu component. -->
  - `nav-user.tsx` <!-- User menu dropdown with profile/logout options. -->
  - `section-cards.tsx` <!-- Grid of feature cards for dashboard sections. -->
  - `site-header.test.tsx` <!-- Tests for the site header component. -->
  - `site-header.tsx` <!-- Main header with logo and navigation. -->
  - `theme-provider.tsx` <!-- Theme context provider for light/dark mode. -->
  - `theme-toggle.test.tsx` <!-- Tests for the theme toggle component. -->
  - `theme-toggle.tsx` <!-- Toggle button for switching theme modes. -->
  - `auth/` <!-- Components related to authentication forms. -->
    - `login-form.test.tsx` <!-- Tests for the login form component. -->
    - `login-form.tsx` <!-- Form for user authentication with email/password. -->
    - `signup-form.test.tsx` <!-- Tests for the signup form component. -->
    - `signup-form.tsx` <!-- User registration form component. -->
  - `dam/` <!-- Components specific to the Digital Asset Management feature. -->
    - `asset-selector-modal.test.tsx` <!-- Tests for the asset selector modal. -->
    - `asset-selector-modal.tsx` <!-- Modal for selecting assets from the library. -->
    - `AssetGallery.test.tsx` <!-- Tests for the asset gallery component. -->
    - `AssetGallery.tsx` <!-- Server component for displaying asset gallery. -->
    - `AssetGalleryClient.test.tsx` <!-- Tests for the client-side gallery logic. -->
    - `AssetGalleryClient.tsx` <!-- Client component for interactive asset gallery. -->
    - `AssetGalleryClientWrapper.tsx` <!-- Client wrapper managing state and refetching for AssetGallery. -->
    - `AssetGrid.test.tsx` <!-- Tests for the asset grid layout. -->
    - `AssetGrid.tsx` <!-- Grid layout for displaying assets. -->
    - `AssetGridItem.tsx` <!-- Individual asset item within the grid. -->
    - `AssetThumbnail.test.tsx` <!-- Tests for the asset thumbnail component. -->
    - `AssetThumbnail.tsx` <!-- Thumbnail display for assets with preview. -->
    - `AssetUploader.test.tsx` <!-- Tests for the asset uploader component. -->
    - `AssetUploader.tsx` <!-- Component for uploading and processing assets. -->
    - `dam-breadcrumbs.tsx` <!-- Breadcrumb navigation for DAM folders. -->
    - `folder-sidebar.test.tsx` <!-- Tests for the folder sidebar. -->
    - `folder-sidebar.tsx` <!-- Sidebar for navigating DAM folder structure. -->
    - `FolderItem.tsx` <!-- Component for individual folder item display. -->
    - `FolderThumbnail.tsx` <!-- Thumbnail representation of a folder. -->
    - `new-folder-dialog.tsx` <!-- Dialog for creating new folders in DAM. -->
  - `error/` <!-- Components related to error display. -->
    - `__tests__/`
      - `error-boundary.test.tsx` <!-- Tests for error boundary component. -->
    - `error-boundary.tsx` <!-- Component to catch and handle React errors. -->
    - `error-fallback.tsx` <!-- UI displayed when an error is caught. -->
  - `forms/` <!-- Reusable form field components and utilities. -->
    - `fields/` <!-- Individual, specific form field components. -->
      - `CheckboxField.tsx` <!-- Standardized checkbox field component. -->
      - `CustomField.tsx` <!-- Standardized wrapper for custom field render logic. -->
      - `SwitchField.tsx` <!-- Standardized switch field component. -->
      - `TextareaField.tsx` <!-- Standardized textarea field component. -->
      - `TextField.tsx` <!-- Standardized text input field component. -->
    - `FormFieldTypes.ts` <!-- Shared TypeScript interfaces for form field props. -->
    - `FormField.tsx` <!-- Barrel file re-exporting all field components and types. -->
    - `FormWrapper.tsx` <!-- Wrapper for form with standard styling and layout. -->
    - `index.ts` <!-- Deprecated? FormField.tsx acts as the barrel now. -->
    - `README.md` <!-- Documentation for the form components system. -->
    - `SelectField.tsx` <!-- Dropdown select field with validation. -->
  - `notes/` <!-- Components specific to the notes feature. -->
    - `add-note-dialog.tsx` <!-- Dialog for creating a new note. -->
    - `add-note-form.tsx` <!-- Form for note creation within dialog. -->
    - `note-edit-form.test.tsx` <!-- Tests for the note editing form. -->
    - `note-edit-form.tsx` <!-- Form for editing existing notes. -->
    - `note-list-item.test.tsx` <!-- Tests for the note list item component. -->
    - `note-list-item.tsx` <!-- Individual note display in the list. -->
    - `note-list.tsx` <!-- List of all user notes with filtering. -->
  - `providers/` <!-- React Context providers. -->
    - `toast-provider.tsx` <!-- Provider for toast notifications system. -->
  - `settings/` <!-- Components specific to the settings feature. -->
    - `AddMemberDialog.tsx` <!-- Dialog for adding members to organization. -->
    - `danger-zone.tsx` <!-- Component for dangerous settings like deletion. -->
    - `email-form.tsx` <!-- Form for updating email settings. -->
    - `OrgMemberCard.tsx` <!-- Card component for displaying organization members. -->
    - `OrgMembersTable.tsx` <!-- Presentation component for displaying organization members (table/cards). -->
    - `OrgRoleManager.tsx` <!-- Component for managing organization roles. -->
    - `password-form.test.tsx` <!-- Tests for the password form component. -->
    - `password-form.tsx` <!-- Form for updating passwords. -->
    - `profile-form.test.tsx` <!-- Tests for the profile form component. -->
    - `profile-form.tsx` <!-- Form for updating user profiles. -->
    - `security-section.tsx` <!-- Security settings section component. -->
  - `team/` <!-- Components specific to the team management feature. -->
    - `AddTeamMemberDialog.test.tsx` <!-- Tests for add team member dialog. -->
    - `AddTeamMemberDialog.tsx` <!-- Dialog for inviting new team members. -->
    - `AddTeamMemberForm.test.tsx` <!-- Tests for team member invite form. -->
    - `AddTeamMemberForm.tsx` <!-- Form for adding new team members. -->
    - `TeamMemberCard.test.tsx` <!-- Tests for team member card component. -->
    - `TeamMemberCard.tsx` <!-- Card displaying team member info and controls. -->
    - `TeamMemberList.test.tsx` <!-- Tests for team member list component. -->
    - `TeamMemberList.tsx` <!-- List of all team members with filtering. -->
  - `tts/` <!-- Text-to-Speech components. -->
    - `tts-interface.tsx` <!-- User interface for text-to-speech conversion. -->
    - `TtsInputCard.tsx` <!-- Component containing the input form (text, voice selection) and DAM text actions for the TTS interface. -->
    - `TtsOutputCard.tsx` <!-- Component displaying the generated audio, status, errors, and DAM audio actions for the TTS interface. -->
    - `VoiceSelector.tsx` <!-- Component for selecting a TTS voice using a Popover and Command list. -->
    - `TtsHistoryItem.tsx` <!-- Component for an individual item in the TTS generation history list. -->
    - `TtsHistoryPanel.tsx` <!-- Component to display a list of past TTS generations. -->
  - `ui/` <!-- Base UI components (often from shadcn/ui). -->
    - `accordion.tsx` <!-- Collapsible content panels component. -->
    - `alert-dialog.tsx` <!-- Modal dialog for important alerts requiring action. -->
    - `alert.tsx` <!-- Colored alert/notification banners. -->
    - `aspect-ratio.tsx` <!-- Component for maintaining specific aspect ratios. -->
    - `avatar.tsx` <!-- User profile picture/icon component. -->
    - `badge.tsx` <!-- Small status indicator component. -->
    - `breadcrumb.tsx` <!-- Hierarchical navigation breadcrumb component. -->
    - `button.stories.tsx` <!-- Storybook documentation for button variants. -->
    - `button.tsx` <!-- Customizable button component with variants. -->
    - `calendar.tsx` <!-- Date picker calendar component. -->
    - `card.tsx` <!-- Container card component with header/footer. -->
    - `carousel.tsx` <!-- Image/content slider carousel component. -->
    - `chart.tsx` <!-- Data visualization chart components. -->
    - `checkbox.tsx` <!-- Custom styled checkbox input. -->
    - `collapsible.tsx` <!-- Expandable/collapsible content section. -->
    - `command.tsx` <!-- Command menu interface component. -->
    - `context-menu.tsx` <!-- Right-click context menu component. -->
    - `dialog.tsx` <!-- Modal dialog/popup component. -->
    - `drawer.tsx` <!-- Side drawer/panel that slides in. -->
    - `dropdown-menu.tsx` <!-- Dropdown menu component. -->
    - `empty-state.tsx` <!-- Component for displaying when no content exists. -->
    - `form.tsx` <!-- Form components with React Hook Form integration. -->
    - `hover-card.tsx` <!-- Card that appears on hover. -->
    - `input-otp.tsx` <!-- One-time password input component. -->
    - `input.tsx` <!-- Text input field component. -->
    - `label.tsx` <!-- Form field label component. -->
    - `menubar.tsx` <!-- Horizontal menu bar component. -->
    - `navigation-menu.tsx` <!-- Dropdown navigation menu component. -->
    - `pagination.tsx` <!-- Pagination controls for multi-page content. -->
    - `popover.tsx` <!-- Popup content that appears on click/hover. -->
    - `progress.tsx` <!-- Progress bar/indicator component. -->
    - `radio-group.tsx` <!-- Group of radio button options. -->
    - `resizable.tsx` <!-- Component with resizable panels/sections. -->
    - `scroll-area.tsx` <!-- Custom scrollable container component. -->
    - `select.tsx` <!-- Dropdown select menu component. -->
    - `separator.tsx` <!-- Horizontal/vertical divider line. -->
    - `sheet.tsx` <!-- Slide-in panel component. -->
    - `sidebar.tsx` <!-- Application sidebar navigation component. -->
    - `skeleton.tsx` <!-- Loading placeholder component. -->
    - `slider.tsx` <!-- Range slider input component. -->
    - `sonner.tsx` <!-- Toast notification integration component. -->
    - `switch.tsx` <!-- Toggle switch component. -->
    - `table.tsx` <!-- Data table component. -->
    - `tabs.tsx` <!-- Tabbed interface component. -->
    - `textarea.tsx` <!-- Multi-line text input component. -->
    - `toast.tsx` <!-- Toast notification component. -->
    - `toaster.tsx` <!-- Container for managing toast notifications. -->
    - `toggle-group.tsx` <!-- Group of toggle buttons. -->
    - `toggle.tsx` <!-- Toggle button component. -->
    - `tooltip.tsx` <!-- Hover tooltip component. -->
    - `use-mobile.tsx` <!-- Hook for detecting mobile viewport. -->
    - `use-toast.ts` <!-- Hook for showing toast notifications. -->
- `context/` <!-- React Context API providers and consumers. -->
  - `palette-context.tsx` <!-- Context for managing color palettes or themes. -->
- `docs/` <!-- Project documentation files. -->
  - `DAM/`
    - `DAM_Build_Steps.md`
    - `DAM_FSD.md`
    - `DAM_Roadmap.md`
  - `features/`
  - `general/`
    - `deployment_steps.md`
    - `quick-tips.md`
    - `test-instructions.md`
  - `misc-docs/`
    - `error-codes.md`
    - `error-handling-patterns.md`
    - `error-troubleshooting.md`
    - `error_handling_steps.md`
    - `form-system-migration.md`
  - `multi-tenant/`
  - `roles/`
  - `starters/`
    - `project-structure.md`
    - `stack-rules.md`
  - `supabase/`
  - `team-members-completed/`
    - `Team_Members_Build_Steps.md`
  - `text-to-speech/`
    - `tts-build-steps.md`
    - `tts-fsd.md`
    - `tts-ux-design.md`
  - `project-structure-full.txt` <!-- Full project structure text file. -->
- `hooks/` <!-- Custom React hooks for reusable component logic. -->
  - `useCompleteOnboarding.ts` <!-- Hook for handling user onboarding completion flow. -->
  - `useFolderFetch.ts` <!-- Hook for fetching and caching folder structure data. -->
  - `useGridDimensions.test.ts` <!-- Tests for grid dimensions hook. -->
  - `useGridDimensions.ts` <!-- Hook for calculating responsive grid layout dimensions. -->
  - `useHeadlessAudioPlayer.ts` <!-- Hook for managing audio playback without a UI, for background tasks or previews. -->
  - `useOrgMembers.ts` <!-- Hook for fetching and managing organization members and roles. -->
  - `useOrgMemberActions.ts` <!-- Hook encapsulating actions for organization members (role change, remove, resend invite, reset pw). -->
  - `useEventListener.ts` <!-- Hook for managing event listeners. -->
  - `useForm.ts` <!-- Generic hook for managing form state and validation. -->
  - `useIntersectionObserver.ts` <!-- Hook for observing element visibility. -->
  - `useIsomorphicLayoutEffect.ts` <!-- Hook for layout effect in SSR/CSR. -->
  - `useLocalStorage.ts` <!-- Hook for interacting with browser local storage. -->
  - `useMediaQuery.ts` <!-- Hook for tracking media query matches. -->
  - `useOnboarding.ts` <!-- Hook for managing state, logic, and side effects for the user onboarding flow. -->
  - `usePagination.ts` <!-- Hook for managing pagination state. -->
  - `useTtsDamIntegration.ts` <!-- Hook for managing DAM interactions (loading text, saving audio) within the TTS feature. -->
  - `useTtsGeneration.ts` <!-- Hook for managing TTS generation state, polling, and results. -->
- `lib/` <!-- Shared libraries, utilities, and core logic. -->
  - `__mocks__/`
    - `errors/` <!-- Mocks for error handling utilities in tests. -->
    - `supabase/` <!-- Mocks for Supabase client in tests. -->
  - `actions/` <!-- Server actions for form submissions and backend operations. -->
    - `auth.actions.ts` <!-- Actions related to user authentication (login, signup). -->
    - `auth.test.ts` <!-- Tests for authentication actions. -->
    - `common.actions.ts` <!-- General-purpose server actions. -->
    - `notes.actions.ts` <!-- Actions for managing notes (from app/(protected)/documents/notes/actions.ts). -->
    - `onboarding.actions.ts` <!-- Actions related to the user onboarding process. -->
    - `profile.actions.ts` <!-- Actions for updating user profile information. -->
    - `team.actions.ts` <!-- Actions for team management (inviting, removing members). -->
    - `dam/` <!-- Server actions specific to Digital Asset Management. -->
      - `asset.actions.ts` <!-- Actions for managing individual assets (metadata, deletion). -->
      - `folder.actions.ts` <!-- Actions for managing DAM folders (create, rename, delete). -->
    - `settings.actions.ts` <!-- Actions for updating user settings. -->
  - `auth/` <!-- Authentication related utilities and configurations. -->
    - `__tests__/`
      - `utils.test.ts` <!-- Tests for authentication utility functions. -->
    - `config.ts` <!-- Configuration for authentication providers (e.g., Supabase Auth). -->
    - `utils.ts` <!-- Utility functions for authentication tasks. -->
  - `config/` <!-- Application-wide configuration settings. -->
    - `site.ts` <!-- Site metadata, navigation links, etc. -->
  - `constants/` <!-- Constant values used throughout the application. -->
    - `dashboard.ts` <!-- Constants related to the dashboard feature. -->
    - `index.ts` <!-- Barrel file for all constants. -->
    - `paths.ts` <!-- Application route paths. -->
    - `roles.ts` <!-- Definitions of user roles and permissions. -->
    - `tts.ts` <!-- Constants related to the Text-to-Speech feature. -->
  - `errors/` <!-- Custom error classes and error handling utilities. -->
    - `__tests__/`
      - `error-utils.test.ts` <!-- Tests for error utility functions. -->
    - `error-utils.ts` <!-- Utility functions for error handling and reporting. -->
    - `index.ts` <!-- Barrel file for error-related modules. -->
    - `types.ts` <!-- TypeScript types for error objects. -->
  - `forms/` <!-- Utilities and configurations for form handling. -->
    - `__tests__/`
      - `utils.test.ts` <!-- Tests for form utility functions. -->
    - `utils.ts` <!-- Utility functions for form validation and submission. -->
  - `hooks/` <!-- Legacy hooks, prefer top-level `hooks/` directory. -->
  - `logging/` <!-- Logging configurations and utilities. -->
    - `logger.ts` <!-- Main logger instance and configuration. -->
  - `middleware/` <!-- Next.js middleware configurations. -->
    - `__tests__/`
      - `auth-middleware.test.ts` <!-- Tests for authentication middleware. -->
    - `auth-middleware.ts` <!-- Middleware for protecting routes based on auth status. -->
  - `replicate/` <!-- Utilities for interacting with the Replicate API. -->
    - `client.ts` <!-- Replicate API client setup. -->
    - `types.ts` <!-- TypeScript types for Replicate API requests/responses. -->
  - `repositories/` <!-- Data access layer, abstracting data sources. -->
    - `UserRepository.ts` <!-- Repository for user data operations. -->
    - `DamRepository.ts` <!-- Repository for DAM data operations. -->
  - `schemas/` <!-- Zod schemas for data validation. -->
    - `auth.schema.ts` <!-- Schemas for authentication forms. -->
    - `dam.schema.ts` <!-- Schemas for DAM related data (assets, folders). -->
    - `notes.schema.ts` <!-- Schemas for notes validation. -->
    - `onboarding.schema.ts` <!-- Schemas for onboarding form validation. -->
    - `profile.schema.ts` <!-- Schemas for profile update forms. -->
    - `settings.schema.ts` <!-- Schemas for various settings forms. -->
    - `team.schema.ts` <!-- Schemas for team management forms. -->
    - `tts.schema.ts` <!-- Schemas for Text-to-Speech input validation. -->
  - `services/` <!-- Business logic services, orchestrating use cases. -->
    - `EmailService.ts` <!-- Service for sending emails. -->
    - `StorageService.ts` <!-- Service for interacting with file storage. -->
  - `store/` <!-- State management stores (e.g., Zustand, Redux). -->
    - `uiStore.ts` <!-- Store for UI related state (modals, sidebar). -->
  - `supabase/` <!-- Supabase client and utility functions. -->
    - `client.ts` <!-- Supabase client initialization (browser/server). -->
    - `middleware.ts` <!-- Supabase middleware client. -->
    - `server.ts` <!-- Supabase server-side client. -->
    - `utils.ts` <!-- Utility functions for Supabase operations. -->
  - `usecases/` <!-- Application-specific business logic orchestrators. -->
    - `dam/` <!-- Use cases related to Digital Asset Management. -->
      - `uploadAssetUsecase.ts` <!-- Handles asset upload logic. -->
    - `tts/` <!-- Use cases related to Text-to-Speech. -->
      - `getTtsHistoryUsecase.ts` <!-- Usecase for fetching TTS generation history. -->
      - `markTtsUrlAsInvalidUsecase.ts` <!-- Usecase for marking a TTS audio URL as invalid/expired. -->
      - `generateSpeechUsecase.ts` <!-- Handles speech generation logic. -->
  - `utils/` <!-- General utility functions. -->
- `public/` <!-- Static assets served publicly. -->
  - `placeholders/` <!-- Placeholder images or assets. -->
  - `favicon.ico` <!-- Application icon for browser tabs. -->