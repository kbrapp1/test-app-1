---
description: 
globs: 
alwaysApply: false
---
# Project Structure Overview
<!-- For a detailed list of technologies and versions used, see [stack-rules.md](mdc:docs/starters/stack-rules.md) -->

- `__mocks__/` <!-- Mocks for testing. -->
  - `next/` <!-- Mocks for Next.js components/functions. -->
- `.cursor/` <!-- Folder for Cursor IDE specific configurations. -->
  - `rules/` <!-- Contains custom rules for Cursor AI. -->
    - `cursor_rules.mdc` <!-- Rules for formatting Cursor rules. -->
    - `self_improve.mdc` <!-- Rules for improving Cursor rules over time. -->
    - `project-structure.mdc` <!-- This file: Overview of the project's directory structure. -->
    - `typescript.mdc` <!-- TypeScript specific coding rules. -->
- `.storybook/` <!-- Configuration for Storybook, a UI component development environment. -->
  - `main.ts` <!-- Main Storybook configuration file. -->
  - `preview.tsx` <!-- Storybook preview configuration (global decorators, parameters). -->
  - `vitest.setup.ts` <!-- Setup file for Vitest within Storybook context. -->
- `app/` <!-- Main application directory for Next.js App Router. -->
  - `(protected)/` <!-- Route group for authenticated routes. -->
    - `layout.tsx` <!-- Layout specific to protected routes. -->
    - `ai-playground/` <!-- Feature: AI Playground section. -->
      - `text-to-speech/`
        - `page.tsx` <!-- Page component for Text-to-Speech feature UI. -->
    - `dam/` <!-- Feature: Digital Asset Management section. -->
      - `page.tsx` <!-- Main page component for DAM dashboard. -->
      - `upload/` <!-- Sub-route for uploading assets. -->
        - `page.tsx` <!-- Page component for asset upload interface. -->
    - `dashboard/` <!-- Feature: Main dashboard section. -->
      - `data.json` <!-- Static data used by the dashboard for charts/metrics. -->
      - `page.tsx` <!-- Page component for main app dashboard. -->
    - `documents/` <!-- Feature: Document management section. -->
      - `notes/` <!-- Sub-section for notes. -->
        - `actions.test.ts` <!-- Tests for notes server actions. -->
        - `actions.ts` <!-- Server actions for creating, editing, and deleting notes. -->
        - `page.test.tsx` <!-- Tests for the notes page component. -->
        - `page.tsx` <!-- Page component for displaying and managing notes. -->
    - `settings/` <!-- Feature: User settings section. -->
      - `layout.test.tsx` <!-- Tests for the settings layout. -->
      - `layout.tsx` <!-- Layout with navigation for all settings pages. -->
      - `page.tsx` <!-- Main settings overview page. -->
      - `danger/` <!-- Sub-section for dangerous settings (e.g., account deletion). -->
        - `page.test.tsx`
        - `page.tsx` <!-- Page with account deletion and other danger zone settings. -->
      - `email/` <!-- Sub-section for email settings. -->
        - `page.test.tsx`
        - `page.tsx` <!-- Page for updating user email address. -->
      - `org-roles/`
        - `page.tsx` <!-- Page for managing organization roles and permissions. -->
      - `password/` <!-- Sub-section for password settings. -->
        - `page.test.tsx`
        - `page.tsx` <!-- Page for updating user password. -->
      - `profile/` <!-- Sub-section for user profile settings. -->
        - `page.test.tsx`
        - `page.tsx` <!-- Page for updating user profile information. -->
      - `security/` <!-- Sub-section for security settings. -->
        - `page.test.tsx`
        - `page.tsx` <!-- Page for security settings like 2FA. -->
    - `team/` <!-- Feature: Team management section. -->
      - `page.tsx` <!-- Page component for managing team members. -->
  - `api/` <!-- Directory for API route handlers. -->
    - `dam/` <!-- API routes related to DAM. -->
      - `route.test.ts` <!-- Tests for the main DAM API route. -->
      - `route.ts` <!-- API route for retrieving and managing digital assets. -->
      - `upload/` <!-- API route for handling asset uploads. -->
        - `route.test.ts` <!-- Tests for the upload API route. -->
        - `route.ts` <!-- API handler for file uploads to storage. -->
    - `profile/` <!-- API routes related to user profiles. -->
      - `route.test.ts`
      - `route.ts` <!-- API route for fetching and updating user profiles. -->
    - `team/` <!-- API routes related to team management. -->
      - `upload/` <!-- Specific API route possibly for team-related uploads. -->
        - `route.test.ts`
        - `route.ts` <!-- API handler for team member profile picture uploads. -->
  - `auth/` <!-- Routes related to authentication. -->
    - `confirm/` <!-- Handles user confirmation actions. -->
      - `confirm-logic.tsx` <!-- Client-side logic for email confirmation process. -->
      - `page.tsx` <!-- Page component displaying confirmation status. -->
    - `callback/` <!-- Handles callbacks from authentication providers. -->
  - `login/` <!-- Public login page route. -->
    - `forgot/` <!-- Password recovery flow. -->
    - `page.tsx` <!-- Login page with authentication form. -->
    - `reset/`
      - `password/`
        - `page.tsx` <!-- Page for setting a new password after reset. -->
  - `onboarding/`
    - `page.tsx` <!-- User onboarding flow after registration. -->
  - `signup/` <!-- Public signup page route. -->
    - `page.tsx` <!-- Registration page with signup form. -->
  - `error.tsx` <!-- Error boundary UI for the entire app. -->
  - `globals.css` <!-- Global CSS styles and Tailwind imports. -->
  - `layout.tsx` <!-- Root layout with providers and global elements. -->
  - `page.tsx` <!-- Root landing page (homepage). -->
- `components/` <!-- Reusable UI components. -->
  - `app-providers.tsx` <!-- Component for wrapping the app with context providers. -->
  - `app-sidebar.tsx` <!-- Main application sidebar navigation component. -->
  - `chart-area-interactive.tsx` <!-- Interactive area chart with hover effects. -->
  - `command-palette.test.tsx` <!-- Tests for the command palette component. -->
  - `command-palette.tsx` <!-- Command palette (Cmd+K) for quick navigation. -->
  - `data-table.tsx` <!-- Reusable data table with sorting and filtering. -->
  - `error-boundary.tsx` <!-- Error boundary to catch and display UI errors. -->
  - `nav-documents.test.tsx` <!-- Tests for the documents navigation component. -->
  - `nav-documents.tsx` <!-- Navigation for document section with folder structure. -->
  - `nav-main.test.tsx` <!-- Tests for the main navigation component. -->
  - `nav-main.tsx` <!-- Main navigation links for the application. -->
  - `nav-secondary.test.tsx` <!-- Tests for the secondary navigation component. -->
  - `nav-secondary.tsx` <!-- Secondary contextual navigation component. -->
  - `nav-user.test.tsx` <!-- Tests for the user navigation/menu component. -->
  - `nav-user.tsx` <!-- User menu dropdown with profile/logout options. -->
  - `section-cards.tsx` <!-- Grid of feature cards for dashboard sections. -->
  - `site-header.test.tsx` <!-- Tests for the site header component. -->
  - `site-header.tsx` <!-- Main header with logo and navigation. -->
  - `theme-provider.tsx` <!-- Theme context provider for light/dark mode. -->
  - `theme-toggle.test.tsx` <!-- Tests for the theme toggle component. -->
  - `theme-toggle.tsx` <!-- Toggle button for switching theme modes. -->
  - `auth/` <!-- Components related to authentication forms. -->
    - `login-form.test.tsx` <!-- Tests for the login form component. -->
    - `login-form.tsx` <!-- Form for user authentication with email/password. -->
    - `signup-form.test.tsx` <!-- Tests for the signup form component. -->
    - `signup-form.tsx` <!-- User registration form component. -->
  - `dam/` <!-- Components specific to the Digital Asset Management feature. -->
    - `asset-selector-modal.test.tsx` <!-- Tests for the asset selector modal. -->
    - `asset-selector-modal.tsx` <!-- Modal for selecting assets from the library. -->
    - `AssetGallery.test.tsx` <!-- Tests for the asset gallery component. -->
    - `AssetGallery.tsx` <!-- Server component for displaying asset gallery. -->
    - `AssetGalleryClient.test.tsx` <!-- Tests for the client-side gallery logic. -->
    - `AssetGalleryClient.tsx` <!-- Client component for interactive asset gallery. -->
    - `AssetGalleryClientWrapper.tsx` <!-- Client wrapper managing state and refetching for AssetGallery. -->
    - `AssetGrid.test.tsx` <!-- Tests for the asset grid layout. -->
    - `AssetGrid.tsx` <!-- Grid layout for displaying assets. -->
    - `AssetGridItem.tsx` <!-- Individual asset item within the grid. -->
    - `AssetThumbnail.test.tsx` <!-- Tests for the asset thumbnail component. -->
    - `AssetThumbnail.tsx` <!-- Thumbnail display for assets with preview. -->
    - `AssetUploader.test.tsx` <!-- Tests for the asset uploader component. -->
    - `AssetUploader.tsx` <!-- Component for uploading and processing assets. -->
    - `dam-breadcrumbs.tsx` <!-- Breadcrumb navigation for DAM folders. -->
    - `folder-sidebar.test.tsx` <!-- Tests for the folder sidebar. -->
    - `folder-sidebar.tsx` <!-- Sidebar for navigating DAM folder structure. -->
    - `FolderItem.tsx` <!-- Component for individual folder item display. -->
    - `FolderThumbnail.tsx` <!-- Thumbnail representation of a folder. -->
    - `new-folder-dialog.tsx` <!-- Dialog for creating new folders in DAM. -->
  - `error/` <!-- Components related to error display. -->
    - `__tests__/`
      - `error-boundary.test.tsx` <!-- Tests for error boundary component. -->
    - `error-boundary.tsx` <!-- Component to catch and handle React errors. -->
    - `error-fallback.tsx` <!-- UI displayed when an error is caught. -->
  - `forms/` <!-- Reusable form field components and utilities. -->
    - `fields/` <!-- Individual, specific form field components. -->
      - `CheckboxField.tsx` <!-- Standardized checkbox field component. -->
      - `CustomField.tsx` <!-- Standardized wrapper for custom field render logic. -->
      - `SwitchField.tsx` <!-- Standardized switch field component. -->
      - `TextareaField.tsx` <!-- Standardized textarea field component. -->
      - `TextField.tsx` <!-- Standardized text input field component. -->
    - `FormFieldTypes.ts` <!-- Shared TypeScript interfaces for form field props. -->
    - `FormField.tsx` <!-- Barrel file re-exporting all field components and types. -->
    - `FormWrapper.tsx` <!-- Wrapper for form with standard styling and layout. -->
    - `index.ts` <!-- Deprecated? FormField.tsx acts as the barrel now. -->
    - `README.md` <!-- Documentation for the form components system. -->
    - `SelectField.tsx` <!-- Dropdown select field with validation. -->
  - `notes/` <!-- Components specific to the notes feature. -->
    - `add-note-dialog.tsx` <!-- Dialog for creating a new note. -->
    - `add-note-form.tsx` <!-- Form for note creation within dialog. -->
    - `note-edit-form.test.tsx` <!-- Tests for the note editing form. -->
    - `note-edit-form.tsx` <!-- Form for editing existing notes. -->
    - `note-list-item.test.tsx` <!-- Tests for the note list item component. -->
    - `note-list-item.tsx` <!-- Individual note display in the list. -->
    - `note-list.tsx` <!-- List of all user notes with filtering. -->
  - `providers/` <!-- React Context providers. -->
    - `toast-provider.tsx` <!-- Provider for toast notifications system. -->
  - `settings/` <!-- Components specific to the settings feature. -->
    - `AddMemberDialog.tsx` <!-- Dialog for adding members to organization. -->
    - `danger-zone.tsx` <!-- Component for dangerous settings like deletion. -->
    - `email-form.tsx` <!-- Form for updating email settings. -->
    - `OrgMemberCard.tsx` <!-- Card component for displaying organization members. -->
    - `OrgMembersDesktopTable.tsx` <!-- Desktop-specific table view for organization members. -->
    - `OrgMembersTable.columns.tsx` <!-- Column definitions for the organization members table. -->
    - `OrgMembersTable.tsx` <!-- Presentation component for displaying organization members (table/cards). -->
    - `OrgRoleManager.tsx` <!-- Component for managing organization roles. -->
    - `password-form.test.tsx` <!-- Tests for the password form component. -->
    - `password-form.tsx` <!-- Form for updating passwords. -->
    - `profile-form.test.tsx` <!-- Tests for the profile form component. -->
    - `profile-form.tsx` <!-- Form for updating user profiles. -->
    - `security-section.tsx` <!-- Security settings section component. -->
  - `team/` <!-- Components specific to the team management feature. -->
    - `AddTeamMemberDialog.test.tsx` <!-- Tests for add team member dialog. -->
    - `AddTeamMemberDialog.tsx` <!-- Dialog for inviting new team members. -->
    - `AddTeamMemberForm.test.tsx` <!-- Tests for team member invite form. -->
    - `AddTeamMemberForm.tsx` <!-- Form for adding new team members. -->
    - `TeamMemberCard.test.tsx` <!-- Tests for team member card component. -->
    - `TeamMemberCard.tsx` <!-- Card displaying team member info and controls. -->
    - `TeamMemberList.test.tsx` <!-- Tests for team member list component. -->
    - `TeamMemberList.tsx` <!-- List of all team members with filtering. -->
  - `tts/` <!-- Text-to-Speech components. -->
    - `tts-interface.tsx` <!-- User interface for text-to-speech conversion. -->
    - `TtsHistoryItem.tsx` <!-- Component for an individual item in the TTS generation history list. -->
    - `TtsHistoryItemActions.tsx` <!-- Actions for a TTS history item (e.g., retry, delete). -->
    - `TtsHistoryItemErrorDisplay.tsx` <!-- Component to display errors for a TTS history item. -->
    - `TtsHistoryItemInfo.tsx` <!-- Component displaying information for a TTS history item. -->
    - `TtsHistoryList.tsx` <!-- Component for displaying the list of TTS history items. -->
    - `TtsHistoryPanel.tsx` <!-- Component to display a list of past TTS generations. -->
    - `TtsHistoryPanelHeader.tsx` <!-- Header component for the TTS history panel. -->
    - `TtsHistoryPanelSearch.tsx` <!-- Search input component for the TTS history panel. -->
    - `TtsInputCard.tsx` <!-- Component containing the input form (text, voice selection) and DAM text actions for the TTS interface. -->
    - `TtsOutputCard.tsx` <!-- Component displaying the generated audio, status, errors, and DAM audio actions for the TTS interface. -->
    - `ttsHistoryUtils.ts` <!-- Utility functions for TTS history. -->
    - `useTtsHistory.ts` <!-- Hook for managing TTS history data and state. -->
    - `useTtsHistoryItemState.ts` <!-- Hook for managing state of a TTS history item. -->
    - `VoiceSelector.tsx` <!-- Component for selecting a TTS voice using a Popover and Command list. -->
  - `ui/` <!-- Base UI components (often from shadcn/ui). -->
    - `accordion.tsx` <!-- Collapsible content panels component. -->
    - `alert-dialog.tsx` <!-- Modal dialog for important alerts requiring action. -->
    - `alert.tsx` <!-- Colored alert/notification banners. -->
    - `aspect-ratio.tsx` <!-- Component for maintaining specific aspect ratios. -->
    - `avatar.tsx` <!-- User profile picture/icon component. -->
    - `badge.tsx` <!-- Small status indicator component. -->
    - `breadcrumb.tsx` <!-- Hierarchical navigation breadcrumb component. -->
    - `button.stories.tsx` <!-- Storybook documentation for button variants. -->
    - `button.tsx` <!-- Customizable button component with variants. -->
    - `calendar.tsx` <!-- Date picker calendar component. -->
    - `card.tsx` <!-- Container card component with header/footer. -->
    - `carousel.tsx` <!-- Image/content slider carousel component. -->
    - `chart.tsx` <!-- Data visualization chart components. -->
    - `checkbox.tsx` <!-- Custom styled checkbox input. -->
    - `collapsible.tsx` <!-- Expandable/collapsible content section. -->
    - `command.tsx` <!-- Command menu interface component. -->
    - `context-menu.tsx` <!-- Right-click context menu component. -->
    - `dialog.tsx` <!-- Modal dialog/popup component. -->
    - `drawer.tsx` <!-- Side drawer/panel that slides in. -->
    - `dropdown-menu.tsx` <!-- Dropdown menu component. -->
    - `empty-state.tsx` <!-- Component for displaying when no content exists. -->
    - `form.tsx` <!-- Form components with React Hook Form integration. -->
    - `hover-card.tsx` <!-- Card that appears on hover. -->
    - `input-otp.tsx` <!-- One-time password input component. -->
    - `input.tsx` <!-- Text input field component. -->
    - `label.tsx` <!-- Form field label component. -->
    - `menubar.tsx` <!-- Horizontal menu bar component. -->
    - `navigation-menu.tsx` <!-- Dropdown navigation menu component. -->
    - `pagination.tsx` <!-- Pagination controls for multi-page content. -->
    - `popover.tsx` <!-- Popup content that appears on click/hover. -->
    - `progress.tsx` <!-- Progress bar/indicator component. -->
    - `radio-group.tsx` <!-- Group of radio button options. -->
    - `resizable.tsx` <!-- Component with resizable panels/sections. -->
    - `scroll-area.tsx` <!-- Custom scrollable container component. -->
    - `select.tsx` <!-- Dropdown select menu component. -->
    - `separator.tsx` <!-- Horizontal/vertical divider line. -->
    - `sheet.tsx` <!-- Slide-in panel component. -->
    - `sidebar.tsx` <!-- Application sidebar navigation component. -->
    - `skeleton.tsx` <!-- Loading placeholder component. -->
    - `slider.tsx` <!-- Range slider input component. -->
    - `sonner.tsx` <!-- Toast notification integration component. -->
    - `switch.tsx` <!-- Toggle switch component. -->
    - `table.tsx` <!-- Data table component. -->
    - `tabs.tsx` <!-- Tabbed interface component. -->
    - `textarea.tsx` <!-- Multi-line text input component. -->
    - `toast.tsx` <!-- Toast notification component. -->
    - `toaster.tsx` <!-- Container for managing toast notifications. -->
    - `toggle-group.tsx` <!-- Group of toggle buttons. -->
    - `toggle.tsx` <!-- Toggle button component. -->
    - `tooltip.tsx` <!-- Hover tooltip component. -->
    - `use-mobile.tsx` <!-- Hook for detecting mobile viewport. -->
    - `use-toast.ts` <!-- Hook for showing toast notifications. -->
    - `useWaveSurfer.ts` <!-- Hook for integrating WaveSurfer.js for audio visualization. -->
- `context/` <!-- React Context API providers and consumers. -->
  - `palette-context.tsx` <!-- Context for managing color palettes or themes. -->
- `docs/` <!-- Project documentation files. -->
  - `DAM/`
    - `DAM_Build_Steps.md`
    - `DAM_FSD.md`
    - `DAM_Roadmap.md`
  - `features/`
  - `general/`
    - `deployment_steps.md`
    - `quick-tips.md`
    - `test-instructions.md`
  - `misc-docs/`
    - `error-codes.md`
    - `error-handling-patterns.md`
    - `error-troubleshooting.md`
    - `error_handling_steps.md`
    - `form-system-migration.md`
  - `multi-tenant/`
  - `roles/`
  - `starters/`
    - `project-structure.md`
    - `stack-rules.md`
  - `supabase/`
  - `team-members-completed/`
    - `Team_Members_Build_Steps.md`
  - `text-to-speech/`
    - `tts-build-steps.md`
    - `tts-fsd.md`
    - `tts-ux-design.md`
  - `project-structure-full.txt` <!-- Full project structure text file. -->
- `hooks/` <!-- Custom React hooks for reusable component logic. -->
  - `useCompleteOnboarding.ts` <!-- Hook for handling user onboarding completion flow. -->
  - `useEventListener.ts` <!-- Hook for managing event listeners. -->
  - `useFolderFetch.ts` <!-- Hook for fetching and caching folder structure data. -->
  - `useForm.ts` <!-- Generic hook for managing form state and validation. -->
  - `useGridDimensions.test.ts` <!-- Tests for grid dimensions hook. -->
  - `useGridDimensions.ts` <!-- Hook for calculating responsive grid layout dimensions. -->
  - `useHeadlessAudioPlayer.ts` <!-- Hook for managing audio playback without a UI, for background tasks or previews. -->
  - `useIntersectionObserver.ts` <!-- Hook for observing element visibility. -->
  - `useIsomorphicLayoutEffect.ts` <!-- Hook for layout effect in SSR/CSR. -->
  - `useLocalStorage.ts` <!-- Hook for interacting with browser local storage. -->
  - `useMediaQuery.ts` <!-- Hook for tracking media query matches. -->
  - `useOnboarding.ts` <!-- Hook for managing state, logic, and side effects for the user onboarding flow. -->
  - `useOrgMemberActions.ts` <!-- Hook encapsulating actions for organization members (role change, remove, resend invite, reset pw). -->
  - `useOrgMembers.ts` <!-- Hook for fetching and managing organization members and roles. -->
  - `usePagination.ts` <!-- Hook for managing pagination state. -->
  - `useTtsDamIntegration.ts` <!-- Hook for managing DAM interactions (loading text, saving audio) within the TTS feature. -->
  - `useTtsGeneration.ts` <!-- Hook for managing TTS generation state, polling, and results. -->
  - `useTtsSaveAsDialog.ts` <!-- Hook for managing the "Save As" dialog functionality in TTS. -->
- `lib/` <!-- Shared libraries, utilities, and core logic. -->
  - `__mocks__/`
    - `errors/` <!-- Mocks for error handling utilities in tests. -->
    - `supabase/` <!-- Mocks for Supabase client in tests. -->
  - `actions/` <!-- Server actions for form submissions and backend operations. -->
    - `auth.actions.ts` <!-- Actions related to authentication (login, signup, logout). -->
    - `dam.actions.ts` <!-- Actions related to Digital Asset Management. -->
    - `notes.actions.ts` <!-- Actions for managing notes (create, update, delete). -->
    - `onboarding.actions.ts` <!-- Actions related to the user onboarding process. -->
    - `organization.actions.ts` <!-- Actions for managing organization settings and members. -->
    - `profile.actions.ts` <!-- Actions for updating user profile information. -->
    - `team.actions.ts` <!-- Actions for managing team members. -->
    - `tts.actions.ts` <!-- Actions for Text-to-Speech generation and results. -->
  - `auth/` <!-- Authentication related utilities and configurations. -->
    - `__tests__/`
      - `utils.test.ts` <!-- Tests for auth utility functions. -->
    - `lucia.ts` <!-- Lucia auth configuration and adapter setup. -->
    - `utils.ts` <!-- Utility functions for authentication. -->
  - `config/` <!-- Configuration files for various services and features. -->
    - `appConfig.ts` <!-- General application configuration settings. -->
    - `siteConfig.ts` <!-- Configuration for site metadata, navigation, etc. -->
    - `ttsProviderConfig.ts` <!-- Configuration for TTS providers. -->
  - `constants.ts` <!-- Application-wide constants. -->
  - `db/` <!-- Database schema, migrations, and query utilities. -->
    - `index.ts` <!-- Main export for database utilities. -->
    - `schema.ts` <!-- Database schema definition using Drizzle ORM. -->
  - `errors/` <!-- Custom error classes and error handling utilities. -->
    - `__tests__/`
      - `errorHandler.test.ts` <!-- Tests for the error handler utility. -->
    - `errorHandler.ts` <!-- Centralized error handling utility. -->
    - `index.ts` <!-- Barrel file for error utilities. -->
  - `events/` <!-- Event definitions and handlers for application events. -->
    - `eventEmitter.ts` <!-- Application event emitter instance. -->
    - `eventTypes.ts` <!-- TypeScript types for defined application events. -->
  - `forms/` <!-- Utilities and types related to form handling. -->
    - `__tests__/`
      - `utils.test.ts` <!-- Tests for form utility functions. -->
    - `utils.ts` <!-- Utility functions for form processing and validation. -->
  - `hooks/` <!-- Shared, non-UI specific hooks (utility hooks). -->
    - `useDebounce.ts` <!-- Hook for debouncing function calls. -->
  - `logger.ts` <!-- Logging utility configuration. -->
  - `logging/` <!-- Logging specific utilities. -->
    - `config.ts` <!-- Configuration for the logging library (e.g., Pino). -->
    - `logger.ts` <!-- Main logger instance. -->
  - `middleware/` <!-- Next.js middleware configurations. -->
    - `__tests__/`
      - `authMiddleware.test.ts` <!-- Tests for authentication middleware. -->
    - `authMiddleware.ts` <!-- Middleware for handling authentication and route protection. -->
    - `index.ts` <!-- Main middleware entry point (if combining multiple middlewares). -->
  - `replicate/` <!-- Utilities for interacting with the Replicate API. -->
    - `config.ts` <!-- Configuration for the Replicate client. -->
    - `ReplicateClient.ts` <!-- Client for making API calls to Replicate. -->
  - `repositories/` <!-- Data access layer, abstracting data sources. -->
    - `damRepository.ts` <!-- Repository for DAM related data operations. -->
    - `notesRepository.ts` <!-- Repository for notes data operations. -->
    - `organizationRepository.ts` <!-- Repository for organization data. -->
    - `profileRepository.ts` <!-- Repository for user profile data. -->
    - `teamRepository.ts` <!-- Repository for team data. -->
    - `ttsRepository.ts` <!-- Repository for TTS prediction data. -->
    - `usersRepository.ts` <!-- Repository for user data. -->
  - `schemas/` <!-- Zod schemas for data validation. -->
    - `auth.schemas.ts` <!-- Schemas for authentication forms. -->
    - `dam.schemas.ts` <!-- Schemas for DAM operations. -->
    - `notes.schemas.ts` <!-- Schemas for notes validation. -->
    - `onboarding.schemas.ts` <!-- Schemas for onboarding data. -->
    - `organization.schemas.ts` <!-- Schemas for organization settings. -->
    - `profile.schemas.ts` <!-- Schemas for profile updates. -->
    - `team.schemas.ts` <!-- Schemas for team management. -->
    - `tts.schemas.ts` <!-- Schemas for TTS inputs and outputs. -->
  - `services/` <!-- Business logic services. -->
    - `damService.ts` <!-- Service for DAM related business logic. -->
    - `emailService.ts` <!-- Service for sending emails. -->
    - `notesService.ts` <!-- Service for notes business logic. -->
    - `onboardingService.ts` <!-- Service for user onboarding logic. -->
    - `organizationService.ts` <!-- Service for organization logic. -->
    - `profileService.ts` <!-- Service for profile business logic. -->
    - `teamService.ts` <!-- Service for team business logic. -->
    - `ttsService.ts` <!-- Service for TTS related business logic. -->
  - `store/` <!-- State management stores (e.g., Zustand, Redux). -->
    - `appStore.ts` <!-- General application state store. -->
  - `supabase/` <!-- Supabase client and utilities. -->
    - `client.ts` <!-- Supabase client-side client instance. -->
    - `server.ts` <!-- Supabase server-side client instance. -->
    - `admin.ts` <!-- Supabase admin client (elevated privileges). -->
    - `utils.ts` <!-- Utility functions for Supabase operations. -->
  - `types.ts` <!-- Global TypeScript types and interfaces. -->
  - `usecases/` <!-- Use case specific business logic. Orchestrates services and repositories. -->
    - `dam/`
      - `deleteAssetUsecase.ts`
      - `getAssetUsecase.ts`
      - `listAssetsUsecase.ts`
      - `uploadAssetUsecase.ts`
    - `tts/`
      - `__tests__/`
        - `getSpeechGenerationResultUsecase.test.ts` <!-- Tests for TTS result polling use case. -->
      - `getSpeechGenerationResultUsecase.ts` <!-- Use case for polling TTS generation results. -->
      - `startSpeechGenerationUsecase.ts` <!-- Use case for initiating TTS generation. -->
  - `utils.ts` <!-- General utility functions. -->
  - `vectorDb.ts` <!-- Utilities for interacting with a vector database. -->
- `public/` <!-- Static assets accessible from the web root. -->
  - `placeholders/` <!-- Placeholder images. -->
  - `robots.txt` <!-- Instructions for web crawlers. -->
  - `site.webmanifest` <!-- Web app manifest for PWA capabilities. -->
- `scripts/` <!-- Utility scripts for development and build processes. -->
  - `seed.ts` <!-- Script for seeding the database with initial data. -->
- `stories/` <!-- Storybook stories for UI components. -->
  - `assets/` <!-- Assets used within Storybook stories. -->
  - `Button.stories.tsx` <!-- Stories for the Button component. -->
  - `Page.stories.tsx` <!-- Example stories for page layouts. -->
- `supabase/` <!-- Supabase specific configuration and migrations. -->
  - `.branches/` <!-- Supabase CLI branches. -->
  - `.temp/` <!-- Supabase CLI temporary files. -->
  - `config.toml` <!-- Supabase CLI configuration file. -->
  - `functions/` <!-- Supabase Edge Functions. -->
    - `_shared/` <!-- Shared code/utilities for Edge Functions. -->
      - `cors.ts` <!-- CORS headers utility for functions. -->
      - `supabaseAdmin.ts` <!-- Supabase admin client for functions. -->
    - `admin-resend-invitation/` <!-- Edge function for admin to resend member invitation. -->
      - `index.ts`
    - `admin-reset-password/` <!-- Edge function for admin to trigger password reset for a user. -->
      - `index.ts`
    - `complete-onboarding-membership/` <!-- Edge function to finalize membership during onboarding. -->
      - `index.ts`
    - `invite-member/` <!-- Edge function for inviting a new member to an organization. -->
      - `index.ts`
    - `set-active-org-claim/` <!-- Edge function to set custom JWT claim for active organization. -->
      - `index.ts`
  - `migrations/` <!-- Database schema migrations. -->
    - `meta/`
      - `_journal.json`
    - `0000_..._.sql` <!-- Example migration file. -->
  - `seed.sql` <!-- SQL script for seeding initial database data. -->
- `tests/` <!-- End-to-end and integration tests (e.g., Playwright). -->
  - `auth.setup.ts` <!-- Setup for authentication in E2E tests. -->
  - `auth.spec.ts` <!-- E2E tests for authentication flows. -->
  - `dashboard.spec.ts` <!-- E2E tests for dashboard functionality. -->
  - `example.spec.ts` <!-- Example E2E test file. -->
  - `global.setup.ts` <!-- Global setup for all E2E tests. -->
  - `playwright.config.ts` <!-- Playwright configuration file. -->
- `types/` <!-- Global TypeScript type definitions. -->
  - `lucia.d.ts` <!-- Type augmentations for Lucia auth. -->
  - `next-auth.d.ts` <!-- Type augmentations for NextAuth (if used). -->
- `.env.example` <!-- Example environment variables file. -->
- `.env.local` <!-- Local environment variables (gitignored). -->
- `.eslintrc.json` <!-- ESLint configuration file. -->
- `.gitignore` <!-- Specifies intentionally untracked files that Git should ignore. -->
- `components.json` <!-- Configuration for shadcn/ui components. -->
- `LICENSE` <!-- Project license file. -->
- `middleware.test.ts` <!-- Tests for root middleware.ts (if any). -->
- `middleware.ts` <!-- Root Next.js middleware file. -->
- `next-env.d.ts` <!-- Next.js TypeScript environment declarations. -->
- `next.config.mjs` <!-- Next.js configuration file. -->
- `package.json` <!-- Project dependencies and scripts. -->
- `pnpm-lock.yaml` <!-- PNPM lockfile. -->
- `pnpm-workspace.yaml` <!-- PNPM workspace configuration. -->
- `postcss.config.mjs` <!-- PostCSS configuration file. -->
- `README.md` <!-- Project README file. -->
- `tsconfig.json` <!-- TypeScript configuration file. -->
- `tsconfig.tsbuildinfo` <!-- TypeScript build information file. -->
- `vitest.config.ts` <!-- Vitest configuration file. -->
- `vitest.setup.ts` <!-- Vitest global setup file. -->
- `vitest.shims.d.ts` <!-- Vitest shims for TypeScript. -->
- `vitest.workspace.ts` <!-- Vitest workspace configuration. -->