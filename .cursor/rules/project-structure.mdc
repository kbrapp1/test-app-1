---
description: 
globs: 
alwaysApply: false
---
# Project Structure Overview

<!-- For a detailed list of technologies and versions used, see [stack-rules.md](docs/starters/stack-rules.md) -->

- `.env.example` <!-- Example environment variables file. Copy to .env.local and fill in values. -->
- `.env.local` <!-- Local environment variables (ignored by git). -->
- `.eslintrc.json` <!-- Configuration for ESLint, a code linter. -->
- `.gitignore` <!-- Specifies intentionally untracked files that Git should ignore. -->
- `components.json` <!-- Configuration for shadcn/ui components. -->
- `LICENSE` <!-- Project license file. -->
- `middleware.test.ts` <!-- Tests for the Next.js middleware. -->
- `middleware.ts` <!-- Next.js middleware for handling requests before they complete. -->
- `next-env.d.ts` <!-- TypeScript definitions for Next.js environment variables. -->
- `next.config.mjs` <!-- Configuration file for Next.js. -->
- `package.json` <!-- Project metadata and dependencies. -->
- `pnpm-lock.yaml` <!-- Lockfile for pnpm package manager, ensuring consistent installs. -->
- `pnpm-workspace.yaml` <!-- Configuration for pnpm workspaces (monorepo setup). -->
- `postcss.config.mjs` <!-- Configuration for PostCSS, a CSS transformation tool. -->
- `README.md` <!-- Project overview, setup instructions, etc. See also [deployment_steps.md](docs/general/deployment_steps.md) -->
- `tailwind.config.js` <!-- Configuration file for Tailwind CSS. -->
- `tsconfig.json` <!-- TypeScript compiler configuration. -->
- `tsconfig.tsbuildinfo` <!-- TypeScript build information cache file. -->
- `vitest.config.ts` <!-- Configuration for Vitest testing framework. See [test-instructions.md](docs/general/test-instructions.md) -->
- `vitest.setup.ts` <!-- Setup file for Vitest tests (e.g., global mocks). -->
- `vitest.shims.d.ts` <!-- TypeScript shims for Vitest. -->
- `vitest.workspace.ts` <!-- Vitest workspace configuration (for monorepos). -->

- `.cursor/` <!-- Folder for Cursor IDE specific configurations. -->
  - `rules/` <!-- Contains custom rules for Cursor AI. -->
    - `cursor_rules.mdc` <!-- Rules for formatting Cursor rules. -->
    - `self_improve.mdc` <!-- Rules for improving Cursor rules over time. -->
    - `typescript.mdc` <!-- TypeScript specific coding rules. -->

- `.storybook/` <!-- Configuration for Storybook, a UI component development environment. -->
  - `main.ts` <!-- Main Storybook configuration file. -->
  - `preview.tsx` <!-- Storybook preview configuration (global decorators, parameters). -->
  - `vitest.setup.ts` <!-- Setup file for Vitest within Storybook context. -->

- `app/` <!-- Main application directory for Next.js App Router. -->
  - `error.tsx` <!-- Defines the UI for unhandled errors within this segment. -->
  - `globals.css` <!-- Global CSS styles for the application. -->
  - `layout.tsx` <!-- Root layout component for the entire application. -->
  - `page.tsx` <!-- Root page component (homepage). -->
  - `(protected)/` <!-- Route group for authenticated routes. -->
    - `layout.tsx` <!-- Layout specific to protected routes. -->
    - `ai-playground/` <!-- Feature: AI Playground section. -->
      - `text-to-speech/`
        - `page.tsx` <!-- Page component for Text-to-Speech feature. -->
    - `dam/` <!-- Feature: Digital Asset Management section. -->
      - `page.tsx` <!-- Main page component for DAM. -->
      - `upload/` <!-- Sub-route for uploading assets. -->
        - `page.tsx` <!-- Page component for asset upload. -->
    - `dashboard/` <!-- Feature: Main dashboard section. -->
      - `data.json` <!-- Static data possibly used by the dashboard. -->
      - `page.tsx` <!-- Page component for the dashboard. -->
    - `documents/` <!-- Feature: Document management section. -->
      - `notes/` <!-- Sub-section for notes. -->
        - `actions.test.ts` <!-- Tests for notes server actions. -->
        - `actions.ts` <!-- Server actions for notes. -->
        - `page.test.tsx` <!-- Tests for the notes page component. -->
        - `page.tsx` <!-- Page component for notes. -->
    - `settings/` <!-- Feature: User settings section. -->
      - `layout.test.tsx` <!-- Tests for the settings layout. -->
      - `layout.tsx` <!-- Layout specific to the settings section. -->
      - `page.tsx` <!-- Main page for settings overview. -->
      - `danger/` <!-- Sub-section for dangerous settings (e.g., account deletion). -->
        - `page.test.tsx` <!-- Tests for the danger zone page. -->
        - `page.tsx` <!-- Page component for the danger zone. -->
      - `email/` <!-- Sub-section for email settings. -->
        - `page.test.tsx` <!-- Tests for the email settings page. -->
        - `page.tsx` <!-- Page component for email settings. -->
      - `password/` <!-- Sub-section for password settings. -->
        - `page.test.tsx` <!-- Tests for the password settings page. -->
        - `page.tsx` <!-- Page component for password settings. -->
      - `profile/` <!-- Sub-section for user profile settings. -->
        - `page.test.tsx` <!-- Tests for the profile settings page. -->
        - `page.tsx` <!-- Page component for profile settings. -->
      - `security/` <!-- Sub-section for security settings. -->
        - `page.test.tsx` <!-- Tests for the security settings page. -->
        - `page.tsx` <!-- Page component for security settings. -->
    - `team/` <!-- Feature: Team management section. -->
      - `page.tsx` <!-- Page component for team management. -->
  - `api/` <!-- Directory for API route handlers. -->
    - `dam/` <!-- API routes related to DAM. -->
      - `route.test.ts` <!-- Tests for the main DAM API route. -->
      - `route.ts` <!-- Main API route handler for DAM. -->
      - `upload/` <!-- API route for handling asset uploads. -->
        - `route.test.ts` <!-- Tests for the upload API route. -->
        - `route.ts` <!-- API route handler for uploads. -->
    - `profile/` <!-- API routes related to user profiles. -->
      - `route.test.ts` <!-- Tests for the profile API route. -->
      - `route.ts` <!-- API route handler for profile actions. -->
    - `team/` <!-- API routes related to team management. -->
      - `upload/` <!-- Specific API route possibly for team-related uploads (e.g., avatars). -->
        - `route.test.ts` <!-- Tests for the team upload API route. -->
        - `route.ts` <!-- API route handler for team uploads. -->
    - `users/` <!-- API routes related to users (potentially broader than profile). -->
  - `auth/` <!-- Routes related to authentication (login, signup, callbacks). -->
    - `callback/` <!-- Handles callbacks from authentication providers (e.g., OAuth). -->
    - `confirm/` <!-- Handles user confirmation actions (e.g., email verification). -->
      - `confirm-logic.tsx` <!-- Client component containing confirmation logic. -->
      - `page.tsx` <!-- Page component for the confirmation UI. -->
  - `login/` <!-- Public login page route. -->
    - `page.tsx` <!-- Page component for the login form. -->
  - `signup/` <!-- Public signup page route. -->
    - `page.tsx` <!-- Page component for the signup form. -->

- `batch files/` <!-- Folder for Windows batch scripts. -->
  - `run-browser-tools.bat` <!-- Script to run browser-related tools. -->

- `components/` <!-- Reusable UI components. -->
  - `app-providers.tsx` <!-- Component for wrapping the app with context providers. -->
  - `app-sidebar.tsx` <!-- Main application sidebar component. -->
  - `chart-area-interactive.tsx` <!-- Interactive chart component. -->
  - `command-palette.test.tsx` <!-- Tests for the command palette component. -->
  - `command-palette.tsx` <!-- Command palette UI component (e.g., Ctrl+K). -->
  - `data-table.tsx` <!-- Reusable data table component. -->
  - `error-boundary.tsx` <!-- Component to catch errors in a part of the UI. -->
  - `nav-documents.test.tsx` <!-- Tests for the documents navigation component. -->
  - `nav-documents.tsx` <!-- Navigation specific to the documents section. -->
  - `nav-main.test.tsx` <!-- Tests for the main navigation component. -->
  - `nav-main.tsx` <!-- Main site navigation component. -->
  - `nav-secondary.test.tsx` <!-- Tests for the secondary navigation component. -->
  - `nav-secondary.tsx` <!-- Secondary navigation component (often contextual). -->
  - `nav-user.test.tsx` <!-- Tests for the user navigation/menu component. -->
  - `nav-user.tsx` <!-- User menu component (profile, settings, logout). -->
  - `section-cards.tsx` <!-- Component for displaying sections using card layouts. -->
  - `site-header.test.tsx` <!-- Tests for the site header component. -->
  - `site-header.tsx` <!-- Main header component for the site. -->
  - `theme-provider.tsx` <!-- Provider for managing UI theme (light/dark). -->
  - `theme-toggle.test.tsx` <!-- Tests for the theme toggle component. -->
  - `theme-toggle.tsx` <!-- Button/component to switch themes. -->
  - `auth/` <!-- Components related to authentication forms. -->
    - `login-form-refactored.tsx` <!-- A refactored version of the login form. -->
    - `login-form.test.tsx` <!-- Tests for the login form component. -->
    - `login-form.tsx` <!-- Login form component. -->
    - `signup-form.test.tsx` <!-- Tests for the signup form component. -->
    - `signup-form.tsx` <!-- Signup form component. -->
  - `dam/` <!-- Components specific to the Digital Asset Management feature. -->
    - `asset-selector-modal.test.tsx` <!-- Tests for the asset selector modal. -->
    - `asset-selector-modal.tsx` <!-- Modal component for selecting assets. -->
    - `AssetGallery.test.tsx` <!-- Tests for the asset gallery component. -->
    - `AssetGallery.tsx` <!-- Server component for displaying asset gallery. -->
    - `AssetGalleryClient.test.tsx` <!-- Tests for the client-side gallery logic. -->
    - `AssetGalleryClient.tsx` <!-- Client component part of the asset gallery. -->
    - `AssetGrid.test.tsx` <!-- Tests for the asset grid layout. -->
    - `AssetGrid.tsx` <!-- Component for displaying assets in a grid. -->
    - `AssetGridItem.tsx` <!-- Component representing a single item in the asset grid. -->
    - `AssetThumbnail.test.tsx` <!-- Tests for the asset thumbnail component. -->
    - `AssetThumbnail.tsx` <!-- Component for displaying asset thumbnails. -->
    - `AssetUploader.test.tsx` <!-- Tests for the asset uploader component. -->
    - `AssetUploader.tsx` <!-- Component for handling asset uploads. -->
    - `dam-breadcrumbs.tsx` <!-- Breadcrumbs navigation for the DAM section. -->
    - `folder-sidebar.test.tsx` <!-- Tests for the folder sidebar. -->
    - `folder-sidebar.tsx` <!-- Sidebar component for navigating folders in DAM. -->
    - `FolderItem.tsx` <!-- Component representing a single folder item. -->
    - `FolderThumbnail.tsx` <!-- Component for displaying folder thumbnails. -->
    - `new-folder-dialog.tsx` <!-- Dialog component for creating new folders. -->
  - `error/` <!-- Components related to error display. -->
    - `error-boundary.tsx` <!-- (Duplicate?) Error boundary component. -->
    - `error-fallback.tsx` <!-- Component displayed by the error boundary. -->
    - `__tests__/` <!-- Tests for error components. -->
      - `error-boundary.test.tsx` <!-- Specific tests for the error boundary. -->
  - `forms/` <!-- Reusable form field components and related logic. -->
    - `CheckboxField.tsx` <!-- Checkbox input field component. -->
    - `CustomField.tsx` <!-- Component for creating custom form fields. -->
    - `FormField.tsx` <!-- Generic wrapper or component for form fields. -->
    - `FormWrapper.tsx` <!-- Wrapper component for forms, potentially handling submission/state. -->
    - `index.ts` <!-- Barrel file exporting form components. -->
    - `README.md` <!-- Documentation for the form components system. -->
    - `SelectField.tsx` <!-- Select dropdown field component. -->
    - `SwitchField.tsx` <!-- Switch toggle field component. -->
    - `TextareaField.tsx` <!-- Textarea input field component. -->
    - `TextField.tsx` <!-- Text input field component. -->
  - `layout/` <!-- Components related to page layouts (headers, footers, sidebars). -->
  - `notes/` <!-- Components specific to the notes feature. -->
    - `add-note-dialog.tsx` <!-- Dialog for adding a new note. -->
    - `add-note-form.tsx` <!-- Form used within the add note dialog. -->
    - `note-edit-form.test.tsx` <!-- Tests for the note editing form. -->
    - `note-edit-form.tsx` <!-- Form for editing an existing note. -->
    - `note-list-item.test.tsx` <!-- Tests for the note list item component. -->
    - `note-list-item.tsx` <!-- Component representing a single note in a list. -->
    - `note-list.tsx` <!-- Component for displaying a list of notes. -->
  - `providers/` <!-- React Context providers. -->
    - `toast-provider.tsx` <!-- Provider for displaying toast notifications. -->
  - `settings/` <!-- Components specific to the settings feature. -->
    - `danger-zone.tsx` <!-- Component for the danger zone section in settings. -->
    - `email-form.tsx` <!-- Form for updating email settings. -->
    - `password-form.test.tsx` <!-- Tests for the password update form. -->
    - `password-form.tsx` <!-- Form for updating password. -->
    - `profile-form.test.tsx` <!-- Tests for the profile update form. -->
    - `profile-form.tsx` <!-- Form for updating user profile information. -->
    - `security-section.tsx` <!-- Component for the security settings section. -->
  - `team/` <!-- Components specific to the team management feature. -->
    - `AddTeamMemberDialog.test.tsx` <!-- Tests for the add team member dialog. -->
    - `AddTeamMemberDialog.tsx` <!-- Dialog for adding a new team member. -->
    - `AddTeamMemberForm.test.tsx` <!-- Tests for the add team member form. -->
    - `AddTeamMemberForm.tsx` <!-- Form used within the add team member dialog. -->
    - `TeamMemberCard.test.tsx` <!-- Tests for the team member card component. -->
    - `TeamMemberCard.tsx` <!-- Component displaying information about a team member. -->
    - `TeamMemberList.test.tsx` <!-- Tests for the team member list component. -->
    - `TeamMemberList.tsx` <!-- Component displaying a list of team members. -->
  - `tts/` <!-- (Duplicate?) Text-to-Speech components. -->
    - `tts-interface.tsx`
  - `ui/` <!-- Base UI components, often from a library like shadcn/ui. -->
    - `accordion.tsx` <!-- Accordion component. -->
    - `alert-dialog.tsx` <!-- Alert dialog component. -->
    - `alert.tsx` <!-- Alert message component. -->
    - `aspect-ratio.tsx` <!-- Aspect ratio container component. -->
    - `avatar.tsx` <!-- Avatar display component. -->
    - `badge.tsx` <!-- Badge component. -->
    - `breadcrumb.tsx` <!-- Breadcrumb navigation component. -->
    - `button.stories.tsx` <!-- Storybook stories for the button component. -->
    - `button.tsx` <!-- Button component. -->
    - `calendar.tsx` <!-- Calendar component. -->
    - `card.tsx` <!-- Card component. -->
    - `carousel.tsx` <!-- Carousel/slider component. -->
    - `chart.tsx` <!-- Base chart component (likely using a charting library). -->
    - `checkbox.tsx` <!-- Checkbox component. -->
    - `collapsible.tsx` <!-- Collapsible content component. -->
    - `command.tsx` <!-- Command menu component (used by command palette). -->
    - `context-menu.tsx` <!-- Context menu (right-click menu) component. -->
    - `dialog.tsx` <!-- Dialog/modal component. -->
    - `drawer.tsx` <!-- Drawer (slide-out panel) component. -->
    - `dropdown-menu.tsx` <!-- Dropdown menu component. -->
    - `empty-state.tsx` <!-- Component to display when there is no data. -->
    - `form.tsx` <!-- Form-related components from shadcn/ui (used with react-hook-form). -->
    - `hover-card.tsx` <!-- Hover card component (pop-up on hover). -->
    - `input-otp.tsx` <!-- One-time password input component. -->
    - `input.tsx` <!-- Input field component. -->
    - `label.tsx` <!-- Label component for form inputs. -->
    - `menubar.tsx` <!-- Menu bar component. -->
    - `navigation-menu.tsx` <!-- Navigation menu component. -->
    - `pagination.tsx` <!-- Pagination component. -->
    - `popover.tsx` <!-- Popover component. -->
    - `progress.tsx` <!-- Progress bar component. -->
    - `radio-group.tsx` <!-- Radio button group component. -->
    - `resizable.tsx` <!-- Resizable panel component. -->
    - `scroll-area.tsx` <!-- Scrollable area component with custom scrollbars. -->
    - `select.tsx` <!-- Select dropdown component. -->
    - `separator.tsx` <!-- Separator line component. -->
    - `sheet.tsx` <!-- Sheet component (similar to drawer). -->
    - `sidebar.tsx` <!-- Generic sidebar component structure. -->
    - `skeleton.tsx` <!-- Skeleton loading state component. -->
    - `slider.tsx` <!-- Slider input component. -->
    - `sonner.tsx` <!-- Toast notification component (Sonner library). -->
    - `switch.tsx` <!-- Switch toggle component. -->
    - `table.tsx` <!-- Table component. -->
    - `tabs.tsx` <!-- Tabs component. -->
    - `textarea.tsx` <!-- Textarea component. -->
    - `toast.tsx` <!-- Individual toast component structure. -->
    - `toaster.tsx` <!-- Container for displaying toasts. -->
    - `toggle-group.tsx` <!-- Group of toggle buttons. -->
    - `toggle.tsx` <!-- Single toggle button component. -->
    - `tooltip.tsx` <!-- Tooltip component. -->
    - `use-mobile.tsx` <!-- Hook to detect mobile viewport. -->
    - `use-toast.ts` <!-- Hook for triggering toast notifications. -->

- `context/` <!-- React Context API providers and consumers. -->
  - `palette-context.tsx` <!-- Context for managing color palettes or themes. -->

- `docs/` <!-- Project documentation files. -->
  - `project-structure-full.txt` <!-- (Original?) Full project structure text file. -->
  - `DAM/` <!-- Documentation specific to the DAM feature. -->
    - `DAM_Build_Steps.md` <!-- Steps to build/set up the DAM feature. -->
    - `DAM_FSD.md` <!-- Functional Specification Document for DAM. -->
    - `DAM_Roadmap.md` <!-- Roadmap and future plans for DAM. -->
  - `general/` <!-- General project documentation. -->
    - `deployment_steps.md` <!-- Instructions for deploying the application. -->
    - `quick-tips.md` <!-- Quick tips and tricks for development. -->
    - `test-instructions.md` <!-- Instructions for running tests. -->
  - `misc-docs/` <!-- Miscellaneous documentation. -->
    - `error-codes.md` <!-- List of custom error codes and their meanings. -->
    - `error-handling-patterns.md` <!-- Documentation on standard error handling patterns. -->
    - `error-troubleshooting.md` <!-- Guide for troubleshooting common errors. -->
    - `error_handling_steps.md` <!-- Steps for handling errors during development/debugging. -->
    - `form-system-migration.md` <!-- Documentation related to migrating the form system. -->
  - `starters/` <!-- Starter templates or base documentation. -->
    - `project-structure.md` <!-- Simplified project structure overview. -->
    - `stack-rules.md` <!-- Rules and conventions for the technology stack. -->
  - `team-members-completed/` <!-- Documentation related to the completed team members feature. -->
    - `Team_Members_Build_Steps.md` <!-- Build steps for the team members feature. -->
  - `text-to-speech/` <!-- Documentation specific to the TTS feature. -->
    - `tts-build-steps.md` <!-- Build steps for the TTS feature. -->
    - `tts-fsd.md` <!-- Functional Specification Document for TTS. -->
    - `tts-ux-design.md` <!-- UX design considerations for TTS. -->

- `examples/` <!-- Example code snippets or implementations. -->
  - `login-form-refactored.tsx` <!-- Example of the refactored login form usage. -->
  - `forms/` <!-- Examples related to the forms system. -->
    - `README.md` <!-- Documentation for form examples. -->
    - `signup-form.tsx` <!-- Example implementation of the signup form. -->

- `hooks/` <!-- Custom React hooks. -->
  - `useFolderFetch.ts` <!-- Hook for fetching folder data (likely for DAM). -->
  - `useGridDimensions.test.ts` <!-- Tests for the useGridDimensions hook. -->
  - `useGridDimensions.ts` <!-- Hook for calculating grid dimensions (likely for DAM gallery). -->

- `lib/` <!-- Library code, utilities, helpers, core logic. -->
  - `helpers.ts` <!-- General helper functions. -->
  - `utils.ts` <!-- Utility functions (often includes cn for Tailwind merging). -->
  - `actions/` <!-- Server actions (separate from page/route specific actions). -->
    - `dam/` <!-- DAM specific server actions and tests. -->
      - `setup.ts` <!-- Test setup for DAM actions (placeholder). -->
    - `team.ts` <!-- Core team-related server actions. -->
    - `tts.test.ts` <!-- Tests for TTS server actions. -->
    - `tts.ts` <!-- Core TTS-related server actions. -->
  - `auth/` <!-- Authentication-related library functions and utilities. -->
    - `authorization.ts` <!-- Logic for handling authorization (roles, permissions). -->
    - `examples.md` <!-- Examples related to auth library usage. -->
    - `index.ts` <!-- Barrel file exporting auth utilities. -->
    - `middleware.ts` <!-- Auth-specific middleware logic (may be used by main middleware). -->
    - `roles.ts` <!-- Definitions of user roles. -->
    - `server-action.ts` <!-- Utilities for creating authenticated server actions. -->
    - `__tests__/` <!-- Tests for authentication library functions. -->
      - `authorization.test.ts`
      - `middleware.test.ts`
      - `server-action.test.ts`
  - `config/` <!-- Application configuration files (non-environment specific). -->
    - `navigation.ts` <!-- Configuration for site navigation links. -->
  - `errors/` <!-- Custom error classes and handling utilities. See [error-handling-patterns.md](docs/misc-docs/error-handling-patterns.md) -->
    - `base.ts` <!-- Base error class. -->
    - `client.tsx` <!-- Client-side error handling utilities or components. -->
    - `constants.ts` <!-- Constants related to errors. -->
    - `factory.ts` <!-- Factory function for creating standardized errors. -->
    - `__tests__/` <!-- Tests for error handling utilities. -->
      - `client.test.tsx`
      - `errors.test.ts`
  - `forms/` <!-- Core logic for the forms system. -->
    - `error-handling.ts` <!-- Utilities for handling form errors. -->
    - `index.ts` <!-- Barrel file exporting form utilities. -->
    - `README.md` <!-- Documentation for the forms library code. -->
    - `useFormWithValidation.ts` <!-- Custom hook combining form state and validation. -->
    - `validation.ts` <!-- Validation logic (e.g., using Zod). -->
    - `__tests__/` <!-- Tests for form library logic. -->
      - `error-handling.test.ts`
      - `FormWrapper.test.tsx`
      - `SelectField.test.tsx`
      - `useFormWithValidation.test.ts`
  - `hooks/` <!-- Shared custom hooks (potentially distinct from top-level /hooks). -->
    - `useUser.ts` <!-- Hook for accessing current user data. -->
  - `logging/` <!-- Logging utilities. -->
    - `index.ts` <!-- Barrel file exporting logging functions. -->
  - `middleware/` <!-- Utilities specifically for use within Next.js middleware. -->
    - `error.ts` <!-- Error handling logic within middleware. -->
    - `__tests__/` <!-- Tests for middleware utilities. -->
      - `error.test.ts`
  - `schemas/` <!-- Zod schemas for data validation. -->
    - `team.ts` <!-- Zod schema for team-related data. -->
  - `supabase/` <!-- Utilities for interacting with Supabase. -->
    - `auth-middleware.ts` <!-- Supabase-specific authentication middleware helper. -->
    - `client.ts` <!-- Supabase client instance for client-side use. -->
    - `db.test.ts` <!-- Tests for database interaction helpers. -->
    - `db.ts` <!-- Database interaction helpers (e.g. Supabase client wrappers). -->
    - `README.md` <!-- Documentation for Supabase integration. -->
    - `server.ts` <!-- Supabase client instance for server-side use. -->
  - `types/` <!-- Shared TypeScript type definitions. -->
  - `__mocks__/` <!-- Mock implementations for testing. -->
    - `logging.ts` <!-- Mock for the logging utility. -->
    - `errors/`
      - `base.ts` <!-- Mock for the base error class. -->
    - `supabase/`
      - `db.ts` <!-- Mock for database interactions. -->
      - `server.ts` <!-- Mock for the server-side Supabase client. -->

- `public/` <!-- Static assets served directly. -->
  - `IM logo only.png` <!-- Image file. -->
  - `ironmark-logo.png` <!-- Image file. -->
  - `placeholder-logo.png` <!-- Image file. -->
  - `placeholder-logo.svg` <!-- SVG image file. -->
  - `placeholder-user.jpg` <!-- Image file. -->
  - `placeholder.jpg` <!-- Image file. -->
  - `placeholder.png` <!-- SVG file for fallback thumbnails, despite .png extension. -->
  - `placeholder.svg` <!-- SVG image file. -->
  - `placeholders/` <!-- Type-specific placeholder icons for DAM thumbnails. -->
    - `audio.svg` <!-- Placeholder for audio files (MP3, WAV, etc.). -->
    - `document.svg` <!-- Placeholder for document files (TXT, PDF, DOC, etc.). -->
    - `generic.svg` <!-- Placeholder for other file types. -->

- `scripts/` <!-- Utility scripts (e.g., for build, deployment, codegen). -->
  - `example_prd.txt` <!-- Example production data or script input? -->

- `stories/` <!-- Storybook stories for UI components. -->
  - `button.css` <!-- CSS specific to the button story. -->
  - `Button.stories.ts` <!-- Story definitions for the Button component. -->
  - `Button.tsx` <!-- Button component used in the story (often imported). -->
  - `Configure.mdx` <!-- MDX file for Storybook documentation. -->
  - `header.css` <!-- CSS specific to the header story. -->
  - `Header.stories.ts` <!-- Story definitions for the Header component. -->
  - `Header.tsx` <!-- Header component used in the story. -->
  - `page.css` <!-- CSS specific to the page story. -->
  - `Page.stories.ts` <!-- Story definitions for a Page component example. -->
  - `Page.tsx` <!-- Page component used in the story. -->
  - `assets/` <!-- Assets used within Storybook stories. -->
    - `accessibility.png`, `accessibility.svg`, etc. <!-- Various image and SVG assets. -->

- `supabase/` <!-- Supabase CLI project configuration and migrations. -->
  - `.gitignore` <!-- Gitignore specific to the Supabase directory. -->
  - `config.toml` <!-- Main Supabase CLI configuration file. -->
  - `setup.sql` <!-- Initial SQL setup script (run once). -->
  - `supabase-storage-setup.md` <!-- Documentation for setting up Supabase Storage. -->
  - `.branches/` <!-- Supabase branching feature metadata. -->
    - `_current_branch` <!-- Indicates the currently checked out branch. -->
  - `.temp/` <!-- Temporary files generated by Supabase CLI. -->
    - `cli-latest`, `gotrue-version`, etc. <!-- Internal CLI state files. -->

- `test/` <!-- General testing utilities or configurations (can overlap with Vitest configs). See [test-instructions.md](docs/general/test-instructions.md) -->

- `types/` <!-- Global TypeScript type definitions (can overlap with lib/types). -->
  - `dam.ts` <!-- Types specific to the DAM feature. -->
  - `notes.ts` <!-- Types specific to the notes feature. -->
  - `supabase.ts` <!-- Types generated from the Supabase schema (database types). -->

  - `team.ts` <!-- Types specific to the team feature. -->