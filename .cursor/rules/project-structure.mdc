---
description: 
globs: 
alwaysApply: false
---
# Project Structure Overview

This is a **Next.js 13+ App Router** application with **Domain-Driven Design (DDD)** patterns, following enterprise-level organization.

## Key Architecture Patterns

- **Feature-Based Organization**: Code is grouped by business domain (DAM, TTS, Auth, Marketing Automation, etc.)
- **DDD in DAM Module**: Fully migrated - Domain entities, repositories, and use cases properly separated
- **Progressive DDD Migration**: Other domains will be migrated to DDD patterns later
- **Co-located Tests**: Tests live alongside the code they test
- **Clean Architecture**: Clear separation between UI, business logic, and data layers

## Navigation Guide

### 🎯 Core Business Features
```
app/(protected)/          # Protected application routes
├── dam/                  # Digital Asset Management (DDD-migrated)
├── ai-playground/        # AI features (TTS, chatbot)
│   ├── chatbot/         # AI chatbot interface
│   └── text-to-speech/  # Text-to-speech playground
├── marketing-automation/ # CRM-like features
│   ├── contacts/        # Contact management
│   ├── customers/       # Customer management
│   ├── leads/           # Lead tracking
│   └── opportunities/   # Sales opportunities
├── settings/            # User/org settings
│   ├── profile/         # User profile settings
│   ├── security/        # Security settings
│   ├── org-roles/       # Organization role management
│   └── danger/          # Dangerous operations
├── team/                # Team management
├── documents/           # Document management
│   └── notes/           # Note-taking system
├── playbooks/           # Business playbooks
├── reporting/           # Analytics and reporting
└── integrations/        # Third-party integrations
```

### 🧩 Reusable Components
```
components/
├── ui/                  # Base UI components (shadcn/ui)
├── tts/                 # Text-to-speech components
├── auth/                # Authentication forms
├── team/                # Team management components
├── settings/            # Settings page components
├── forms/               # Reusable form components
│   └── fields/          # Form field components
├── notes/               # Note-taking components
└── providers/           # React context providers
```

### ⚡ Business Logic Layer
```
lib/
├── actions/             # Server actions (Next.js)
│   ├── dam/             # DAM server actions
│   ├── members.ts       # Member management actions
│   ├── team.ts          # Team actions
│   └── tts.ts           # TTS actions
├── dam/                 # DDD-structured DAM domain (MIGRATED)
│   ├── domain/          # Entities, repositories, value objects
│   ├── application/     # Use cases, services, DTOs
│   ├── infrastructure/  # Supabase implementations
│   ├── presentation/    # React components, hooks, types
│   ├── types/           # Domain-specific TypeScript types
│   └── index.ts         # Public API exports
├── usecases/            # Use cases for other domains
│   └── tts/             # TTS business logic (pre-DDD)
├── services/            # External service integrations
├── schemas/             # Validation schemas
├── auth/                # Authentication & authorization
├── hooks/               # Custom React hooks
└── forms/               # Form utilities and validation
```

### 🗄️ Data & API Layer
```
app/api/                 # REST API endpoints
├── dam/                 # DAM API routes
│   ├── asset/           # Asset operations
│   ├── folders/         # Folder operations
│   └── upload/          # File upload handling
├── team/                # Team management API
└── profile/             # User profile API
supabase/                # Database schema & edge functions
├── functions/           # Supabase Edge Functions
└── migrations/          # Database migrations
```

### 📚 Documentation & Configuration
```
docs/                    # Comprehensive feature documentation
├── DAM/                 # DAM feature docs and build steps
├── text-to-speech/      # TTS feature documentation
├── multi-tenant/        # Multi-tenancy implementation
├── roles/               # Role system documentation
└── general/             # General platform documentation
```

## Quick Start Navigation

1. **New Feature**: Start in `app/(protected)/[feature]/`
2. **Reusable UI**: Check `components/ui/` first, then domain-specific components
3. **Business Logic**: 
   - **DAM**: Use `lib/dam/` (DDD structure)
   - **Other domains**: Check `lib/actions/` or `lib/usecases/`
4. **API Integration**: Check `lib/services/` or `app/api/`
5. **Database Changes**: Start in `supabase/migrations/`
6. **Documentation**: Check `docs/[domain]/` for feature-specific docs

## Domain-Specific Patterns

### DAM (Digital Asset Management) ✅ DDD-Migrated
- Follows **Clean Architecture** with full DDD implementation
- **Domain Layer**: `lib/dam/domain/` (entities, repositories, value objects)
- **Application Layer**: `lib/dam/application/` (use cases, services, DTOs)
- **Infrastructure Layer**: `lib/dam/infrastructure/` (Supabase implementations)
- **Presentation Layer**: `lib/dam/presentation/` (React components, hooks, domain types)
- **Types Layer**: `lib/dam/types/` (Domain-specific TypeScript definitions)
- **Public API**: `lib/dam/index.ts` (Centralized exports for clean imports)

### Text-to-Speech (TTS) 🔄 Legacy Structure (Migration Planned)
- **Components**: `components/tts/`
- **Business Logic**: `lib/usecases/tts/` (use case pattern)
- **Service Integration**: `lib/services/elevenlabsService.ts`
- **Server Actions**: `lib/actions/tts.ts`

### Authentication & Authorization 🔄 Legacy Structure (Migration Planned)
- **Middleware**: `lib/auth/middleware.ts`
- **Server Actions**: `lib/auth/server-action.ts`
- **Components**: `components/auth/`
- **Authorization Logic**: `lib/auth/authorization.ts`

### Team Management 🔄 Legacy Structure (Migration Planned)
- **Components**: `components/team/`, `components/settings/`
- **Server Actions**: `lib/actions/team.ts`, `lib/actions/members.ts`
- **API Routes**: `app/api/team/`

### Notes System 🔄 Legacy Structure (Migration Planned)
- **Components**: `components/notes/`
- **Page Logic**: `app/(protected)/documents/notes/`
- **Types**: `types/notes.ts`

## File Naming Conventions

- **Components**: PascalCase (`AssetGallery.tsx`, `TtsInterface.tsx`)
- **Pages**: lowercase (`page.tsx`, `layout.tsx`)
- **Utilities**: camelCase (`folderPickerUtils.ts`, `ttsHistoryUtils.ts`)
- **Tests**: `.test.tsx` or `.test.ts`
- **Types**: `.types.ts`
- **Server Actions**: `[domain].actions.ts`
- **Use Cases**: `[UseCase]UseCase.ts`

## Best Practices Followed

✅ **Co-located Tests**: Tests next to implementation  
✅ **Feature Isolation**: Each domain is self-contained  
✅ **Type Safety**: Comprehensive TypeScript usage  
✅ **Clean Separation**: UI, business logic, and data layers separated  
✅ **Documentation**: Extensive docs for complex features in `docs/`  
✅ **DDD in DAM**: Proper domain-driven design implementation  
✅ **Progressive Migration**: Gradual migration to DDD patterns  

## Migration Status & Future Plans

### ✅ Completed Migrations
- **DAM Domain**: Fully migrated to DDD architecture
- **Multi-tenant Support**: Integrated across the platform
- **Role System**: Complete role-based access control
- **Team Management**: Full team member management system

### 🔄 Planned DDD Migrations
The following domains are candidates for DDD migration:

1. **Text-to-Speech (TTS)**
   - Current: Use case pattern in `lib/usecases/tts/`
   - Target: Full DDD with `lib/tts/domain|application|infrastructure/`

2. **Authentication & Authorization**
   - Current: Mixed in `lib/auth/`
   - Target: DDD structure with proper domain separation

3. **Team Management**
   - Current: Server actions and components
   - Target: DDD with team domain modeling

4. **Marketing Automation**
   - Current: Basic page structure
   - Target: Full CRM domain with DDD

5. **Reporting & Analytics**
   - Current: Basic implementation
   - Target: Analytics domain with DDD

## Areas for Future Enhancement

Consider these optimizations as the codebase grows:

- **Complete DDD Migration**: Migrate remaining domains to DDD structure
- **Barrel Exports**: Add `index.ts` files in component folders for cleaner imports
- **Shared Types**: Consolidate cross-domain types in dedicated folders
- **E2E Tests**: Add Playwright/Cypress tests in a dedicated `e2e/` folder
- **API Documentation**: Generate API docs from the growing API layer
- **Component Library**: Formalize the component system with Storybook
- **Performance Monitoring**: Add performance tracking for the growing feature set

---

*This structure supports both rapid feature development and long-term maintainability, with a clear migration path toward full DDD architecture.*