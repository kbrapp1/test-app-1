---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: .cursor/rules/*.mdc
alwaysApply: true
---
## Core Coding Principles

-   **Iterate on Existing Code:** Always look for existing code to iterate on instead of creating new code.
-   **Maintain Existing Patterns:** Do not drastically change patterns before trying to iterate on existing ones.
-   **Server Management:** Always kill all existing related servers from previous testing before starting a new server.
-   **Test After Changes:** After making changes, ALWAYS ensure a new server is started for testing.
-   **Prefer Simplicity:** Always opt for simple solutions.
-   **Avoid Duplication (DRY):** Check for similar code/functionality elsewhere in the codebase to avoid duplication.
-   **Environment Awareness:** Write code that considers different environments: dev, test, and prod.
-   **Cautious Changes:** Only make requested changes or those you are confident are well-understood and related.
-   **Prioritize Existing Implementations for Bug Fixes:** When fixing issues, exhaust options with the current implementation before introducing new patterns or technologies. If a new pattern is introduced, remove the old implementation.
-   **Clean and Organized Codebase:** Maintain a very clean and organized codebase.
-   **Avoid Inline Scripts:** Avoid writing scripts directly in files, especially if they are likely to be run only once.
-   **File Size Limits:** Avoid files exceeding 200-300 lines of code; refactor at that point.
-   **Mocking for Tests Only:** Mock data only for tests; never for dev or prod environments.
-   **No Stubbing in Dev/Prod:** Never add stubbing or fake data patterns to code affecting dev or prod environments.
-   **`.env` File Protection:** Never overwrite the `.env` file without explicit confirmation.
-   **Focused Changes:** Concentrate on areas of code relevant to the current task.
-   **Isolate Changes:** Do not touch code unrelated to the task at hand.
-   **Thorough Testing:** Write thorough tests for all major functionality.
-   **Stable Architecture:** Avoid major changes to well-functioning feature patterns and architecture unless explicitly instructed.
-   **Impact Awareness:** Always consider how code changes might affect other methods and areas of the codebase.

## Rule Structure and Formatting

-   **Required Rule Structure:**
    ```markdown
    ---
    description: Clear, one-line description of what the rule enforces
    globs: path/to/files/*.ext, other/path/**/* # Be specific with globs
    alwaysApply: boolean # true or false
    ---

    - **Main Points in Bold**
        - Sub-points with details
        - Examples and explanations
    ```

-   **File References:**
    -   Use `[filename](mdc:path/to/file)` (e.g., `[filename](mdc:filename)`) to reference files.
    -   Example for rule references: `[supabase_rules.mdc](mdc:.cursor/rules/supabase_rules.mdc)`
    -   Example for code references: `[schema.sql](mdc:supabase/schema.sql)` (adjust path as needed for Supabase)

-   **Code Examples:**
    -   Use language-specific fenced code blocks.
    ```typescript
    // ✅ DO: Show good examples
    const goodExample = true;

    // ❌ DON'T: Show anti-patterns
    const badExample = false;
    ```

## Rule Content Guidelines

-   **High-Level Overview First:** Start with a general overview of the rule.
-   **Specific Requirements:** Include clear, actionable requirements.
-   **Implementation Examples:** Show examples of correct implementation.
-   **Reference Existing Code:** Refer to existing codebase examples when possible.
-   **Keep Rules DRY:** Avoid repetition by referencing other relevant rules.

## Rule Maintenance

-   **Update with New Patterns:** Update rules when new coding patterns emerge.
-   **Use Real Code Examples:** Add examples from the actual codebase.
-   **Remove Outdated Patterns:** Deprecate or remove rules for outdated patterns.
-   **Cross-Reference:** Link to related rules to maintain consistency.

## Best Practices for Rules

-   **Clarity with Bullet Points:** Use bullet points for easy readability.
-   **Concise Descriptions:** Keep rule descriptions brief and to the point.
-   **DO and DON'T Examples:** Include both positive and negative examples.
-   **Prefer Actual Code Examples:** Use examples from your codebase over theoretical ones.
-   **Consistent Formatting:** Maintain uniform formatting across all rules.

---
description: Guidelines for continuously improving Cursor rules based on emerging code patterns and best practices.
globs: [] # Add relevant globs here if applicable
alwaysApply: true
---

## Rule Self-Improvement Guidelines

### Rule Improvement Triggers

-   New code patterns not covered by existing rules.
-   Repeated similar implementations across multiple files.
-   Common error patterns that could be prevented with a rule.
-   Consistent use of new libraries or tools.
-   Emergence of new best practices within the codebase.

### Analysis Process

-   Compare new code against existing rules.
-   Identify patterns that require standardization.
-   Look for references to external documentation or style guides.
-   Check for consistent error handling patterns.
-   Monitor test patterns and overall code coverage.

### Rule Updates

-   **Add New Rules When:**
    -   A new technology or pattern is used in 3+ files.
    -   Common bugs could be prevented by a new rule.
    -   Code reviews repeatedly highlight the same feedback.
    -   New security or performance patterns emerge.
-   **Modify Existing Rules When:**
    -   Better examples exist within the current codebase.
    -   Additional edge cases or scenarios are discovered.
    -   Related rules have been updated, requiring consistency.
    -   Implementation details of a pattern have changed.

### Example: Pattern Recognition for Supabase

```typescript
// If you see repeated Supabase query patterns like:
async function getUsers() {
  const { data, error } = await supabase
    .from('users')
    .select('id, email')
    .eq('status', 'ACTIVE');

  if (error) {
    console.error('Error fetching users:', error);
    return [];
  }
  return data;
}

// Consider adding to a [supabase_rules.mdc](mdc:.cursor/rules/supabase_rules.mdc):
// - Standard select fields for common tables (e.g., 'users', 'posts').
// - Common 'eq', 'gte', 'lt' conditions.
// - Standardized error handling for Supabase queries.
// - Performance optimization patterns (e.g., limiting selects, using filters).
```

### Rule Quality Checks

-   Rules should be actionable and specific, not vague.
-   Examples should ideally come from actual, vetted code in the repository.
-   References to external documentation or other rules should be up-to-date.
-   Enforcement of defined patterns should be consistent.

### Continuous Improvement

-   Monitor code review comments for recurring themes.
-   Track common development questions or points of confusion.
-   Update rules after major refactors or architectural changes.
-   Add links to relevant official documentation or helpful articles.
-   Ensure cross-references between related rules are maintained.

### Rule Deprecation

-   Clearly mark outdated patterns or rules as deprecated.
-   Remove rules that no longer apply to the current codebase or practices.
-   Update any references pointing to deprecated rules.
-   If applicable, document migration paths from old patterns to new ones.

### Documentation Updates (for Rules)

-   Keep rule examples synchronized with the actual codebase.
-   Update links to external documentation if they change.
-   Maintain and verify links between related rules.
-   Document any breaking changes to rules or their enforcement.

---
*This rule document itself should follow the guidelines outlined within it. Refer to this document ([cursor_rules.mdc](mdc:.cursor/rules/cursor_rules.mdc)) for proper rule formatting and structure.*
