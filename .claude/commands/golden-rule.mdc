---
description: 
globs: 
alwaysApply: true
---
# Golden Rule DDD Guidelines for AI-Driven Next.js Development

## Core Principles

1. **AI-First Architecture**: Leverage AI's ability to maintain complex DDD patterns consistently across large codebases
2. **Single Responsibility Principle**: Each service has one clear purpose, keeping to 200-250 lines when possible
3. **Domain-Driven Design**: Always use DDD best practices, coding, architecture, and compliance
4. **Pattern Consistency**: Use explicit patterns that AI can replicate perfectly without cognitive fatigue
5. **Template-Driven Development**: Create reusable templates and schemas that guide AI code generation
6. **Explicit Instructions**: Embed AI guidance directly in code comments and documentation
7. **No Redundancy**: Review codebase to ensure new code isn't redundant; provide recommendations using DDD, network efficient, API efficient, memory/cache efficient, rendering efficient practices
8. **JWT-Based Security**: All domains must implement JWT custom claims for organization context

## Production Domain Architecture

```typescript
// Current Implemented Domains
export const DOMAINS = {
  core: ['chatbot-widget', 'dam', 'image-generator'],
  supporting: ['tts'],
  generic: ['auth', 'organization', 'monitoring']
} as const;

export const DOMAIN_DEPENDENCIES = {
  'chatbot-widget': ['auth', 'organization', 'openai'],
  'dam': ['auth', 'organization', 'supabase'],
  'image-generator': ['auth', 'organization', 'openai'],
  'tts': ['auth', 'organization'],
  'auth': ['supabase'],
  'organization': ['auth', 'supabase'],
  'monitoring': ['auth', 'organization']
} as const;
```

## JWT-Based Security Architecture

```typescript
/**
 * JWT-Based Organization Security
 * 
 * AI INSTRUCTIONS:
 * - ALL domains must implement JWT custom claims for organization context
 * - Use get_active_organization_id() database function for server-side validation
 * - Implement client-side validation with useOrganizationContext() hook
 * - Never remove organizationId variables - they are security-critical
 * - RLS policies automatically scope all queries via JWT custom claims
 */

// Database Function (PostgreSQL)
CREATE OR REPLACE FUNCTION get_active_organization_id()
RETURNS uuid AS $$
  SELECT nullif(
    (current_setting('request.jwt.claims', true)::jsonb -> 'custom_claims') ->> 'active_organization_id', 
    ''
  )::uuid;
$$ LANGUAGE sql STABLE;

// Server Action Pattern
'use server';
export async function secureServerAction(input: string, organizationId: string) {
  try {
    const service = CompositionRoot.getApplicationService();
    return await service.processSecurely(input, organizationId);
  } catch (error) {
    if (error instanceof DomainError) {
      return { success: false, error: error.toDTO() };
    }
    throw error;
  }
}

// React Component Pattern
export function SecureComponent({ organizationId }: { organizationId: string }) {
  const { activeOrganizationId } = useOrganizationContext();
  
  if (activeOrganizationId !== organizationId) {
    return <SecurityErrorUI message="Organization context mismatch" />;
  }
  
  return <div>Secured content automatically scoped to organization</div>;
}

// RLS Policy Integration
CREATE POLICY "organization_isolation" ON assets
  FOR ALL USING (organization_id = get_active_organization_id());
```

## DDD Layer Architecture

### Domain Layer (Pure Business Logic)
```typescript
/**
 * AI INSTRUCTIONS for Domain Layer:
 * - Pure business logic, no external dependencies
 * - Enforce invariants, publish domain events
 * - Use specific domain errors, not generic Error types
 * - Single responsibility, under 250 lines
 */

// Location: lib/{domain}/domain/
// - aggregates/{Aggregate}AggregateRoot.ts
// - entities/{Entity}.ts
// - value-objects/{ValueObject}ValueObject.ts
// - services/{Service}DomainService.ts
// - events/{Event}Event.ts
// - errors/{Error}Error.ts
// - repositories/I{Repository}.ts (interfaces only)
```

### Application Layer (Use Cases & Orchestration)
```typescript
/**
 * AI INSTRUCTIONS for Application Layer:
 * - Orchestrate domain objects, no business logic
 * - Handle workflow coordination only
 * - Single use case focus per class
 */

// Location: lib/{domain}/application/
// - use-cases/{UseCase}UseCase.ts
// - services/{Service}ApplicationService.ts
// - event-handlers/{Event}Handler.ts
// - dto/{Data}DTO.ts
// - mappers/{Entity}Mapper.ts
```

### Infrastructure Layer (External Concerns)
```typescript
/**
 * AI INSTRUCTIONS for Infrastructure Layer:
 * - Implement domain interfaces
 * - Handle database/external service specifics
 * - Use anti-corruption layers for external systems
 */

// Location: lib/{domain}/infrastructure/
// - persistence/supabase/{Entity}SupabaseRepository.ts
// - providers/{Provider}Provider.ts
// - adapters/{External}Adapter.ts
// - composition/{Domain}CompositionRoot.ts
```

### Presentation Layer (UI & Entry Points)
```typescript
/**
 * AI INSTRUCTIONS for Presentation Layer:
 * - Handle user interaction only
 * - Delegate to application services
 * - Use DTOs, never expose domain entities
 * - Under 200-250 lines per component
 */

// Location: lib/{domain}/presentation/
// - components/{Feature}Section.tsx
// - hooks/use{Feature}.ts
// - actions/{feature}Actions.ts
// - types/{Feature}Types.ts
```

## Essential DDD Patterns

### Aggregate Roots & Domain Events
```typescript
export abstract class AggregateRoot<TId> {
  private _domainEvents: DomainEvent[] = [];
  
  protected addDomainEvent(event: DomainEvent): void {
    this._domainEvents.push(event);
  }
  
  public getUncommittedEvents(): DomainEvent[] {
    return [...this._domainEvents];
  }
  
  protected abstract validateInvariants(): void;
}
```

### Domain-Specific Error Handling
```typescript
export abstract class DomainError extends Error {
  abstract readonly code: string;
  abstract readonly severity: ErrorSeverity;
  
  constructor(
    message: string,
    public readonly context: Record<string, any> = {},
    public readonly timestamp: Date = new Date()
  ) {
    super(message);
    this.name = this.constructor.name;
  }
}

export class BusinessRuleViolationError extends DomainError {
  readonly code = 'BUSINESS_RULE_VIOLATION';
  readonly severity = ErrorSeverity.HIGH;
}

export enum ErrorSeverity {
  LOW = 'low', MEDIUM = 'medium', HIGH = 'high', CRITICAL = 'critical'
}
```

### Anti-Corruption Layer Pattern
```typescript
export interface AntiCorruptionLayer<TExternal, TInternal> {
  translateToInternal(external: TExternal): TInternal;
  translateToExternal(internal: TInternal): TExternal;
}
```

## AI Development Guidelines

### AI Instruction Comments (Required)
```typescript
/**
 * {ServiceName} Domain Service
 * 
 * AI INSTRUCTIONS:
 * - Keep business logic pure, no external dependencies
 * - Maintain single responsibility principle  
 * - Never exceed 250 lines - refactor into smaller services
 * - Follow @golden-rule patterns exactly
 * - Check for existing similar logic before creating new
 * - Always validate inputs using value objects
 * - Handle domain errors with specific error types
 * - Publish domain events for cross-aggregate communication
 */
```

### AI-Friendly Naming Conventions
```typescript
// Domain Layer
abstract class {Aggregate}AggregateRoot
interface I{ServiceName}Service
class {ServiceName}DomainService
class {EntityName}
class {ValueObject}ValueObject
class {EventName}Event
class {ErrorType}Error

// Application Layer  
class {ProcessName}UseCase
class {Coordination}ApplicationService
class {EventName}EventHandler
interface {Data}DTO

// Infrastructure Layer
class {Entity}SupabaseRepository
class {Provider}Provider
class {External}Adapter
class {Domain}CompositionRoot

// Presentation Layer
function {action}Action() // Server actions
function use{Feature}() // React hooks
function {Feature}Section() // UI components
```

## Next.js Integration Patterns

### Server Action Best Practices
```typescript
'use server';
export async function processExample(input: string, organizationId: string) {
  try {
    const service = ExampleCompositionRoot.getApplicationService();
    return await service.processExample(input, organizationId);
  } catch (error) {
    if (error instanceof DomainError) {
      return { success: false, error: error.toDTO() };
    }
    console.error('Unexpected error:', error);
    return { success: false, error: { code: 'INTERNAL_ERROR', message: 'An unexpected error occurred' } };
  }
}
```

### React Query + Server Actions Pattern
```typescript
export function useExampleData(filter: string, organizationId: string) {
  return useQuery({
    queryKey: ['example-data', filter, organizationId],
    queryFn: () => getExampleData(filter, organizationId),
    staleTime: 5 * 60 * 1000,
    retry: (failureCount, error) => {
      if (error?.code === 'BUSINESS_RULE_VIOLATION') return false;
      return failureCount < 3;
    }
  });
}
```

## File Organization Standards

```
/lib/{domain}/
├── DOMAIN_BOUNDARY.md              # AI reads for domain scope
├── domain/
│   ├── aggregates/{Aggregate}AggregateRoot.ts
│   ├── entities/{Entity}.ts
│   ├── value-objects/{ValueObject}ValueObject.ts
│   ├── services/{Service}DomainService.ts
│   ├── events/{Event}Event.ts
│   ├── errors/{Error}Error.ts
│   └── repositories/I{Repository}.ts
├── application/
│   ├── use-cases/{UseCase}UseCase.ts
│   ├── services/{Service}ApplicationService.ts
│   ├── dto/{Data}DTO.ts
│   └── mappers/{Entity}Mapper.ts
├── infrastructure/
│   ├── persistence/supabase/{Entity}SupabaseRepository.ts
│   ├── providers/{Provider}Provider.ts
│   ├── adapters/{External}Adapter.ts
│   └── composition/{Domain}CompositionRoot.ts
└── presentation/
    ├── components/{Feature}Section.tsx
    ├── hooks/use{Feature}.ts
    ├── actions/{feature}Actions.ts
    └── types/{Feature}Types.ts
```

## Quality Standards & AI Validation

### Code Generation Rules
```typescript
/**
 * AI_GENERATION_RULES:
 * - Max file size: 250 lines
 * - Required: AI instruction comments
 * - Required: Input validation with domain errors
 * - Required: Error handling with specific error types
 * - Required: Domain event publishing for state changes
 * - Forbidden: console.log statements in production
 * - Forbidden: any types
 * - Forbidden: direct database calls in domain layer
 * - Forbidden: cross-aggregate direct references
 * - Forbidden: generic Error types in domain layer
 */
```

### AI Development Workflow Checklist
**When Creating New Domains:**
- [ ] Create DOMAIN_BOUNDARY.md with bounded context definition
- [ ] Identify aggregates and consistency boundaries
- [ ] Define domain events and error types
- [ ] Generate all four layers following patterns
- [ ] Implement anti-corruption layers for external dependencies
- [ ] Wire dependencies through composition root
- [ ] Add AI instruction comments to all major components

**When Adding Features:**
- [ ] Check for existing similar functionality across codebase
- [ ] Determine correct domain placement using DOMAIN_BOUNDARY.md
- [ ] Identify which aggregate owns the new functionality
- [ ] Follow established patterns exactly
- [ ] Maintain single responsibility principle
- [ ] Keep files under 200-250 lines

**Pattern Validation (Every File):**
- [ ] Follows naming conventions
- [ ] Respects layer boundaries and aggregate boundaries
- [ ] Uses composition root for dependencies
- [ ] Has proper error handling with domain-specific errors
- [ ] Publishes domain events for significant state changes
- [ ] Includes AI instruction comments
- [ ] Stays under line limits
- [ ] Uses anti-corruption layers for external integrations

## Best Practices

- **No Console Logs**: Remove console.log statements from production code
- **Theme Awareness**: Use CSS custom properties for theme support
- **Error Handling**: Implement proper error boundaries and domain-specific error handling
- **Performance**: Use React Query for data operations, optimize database queries
- **Dependency Injection**: Use composition root for all dependency wiring
- **Event-Driven Architecture**: Use domain events for cross-aggregate communication
- **Organization Context**: Always include organizationId for multi-tenant security
- **File Size**: Keep files under 200-250 lines, refactor when exceeding limits
- **Environment Awareness**: Account for dev, test, and prod environments

This guide enables AI to build maintainable, scalable Next.js applications with advanced DDD architecture, proper error handling, and clear bounded context management while maintaining perfect consistency across all domains and features.